{"meta":{"title":"光辉岁月","subtitle":null,"description":null,"author":"Guanghui Hu","url":"http://yoursite.com"},"pages":[{"title":"关于","date":"2020-03-27T02:50:32.979Z","updated":"2020-03-27T02:50:32.979Z","comments":true,"path":"about/index.html","permalink":"http://yoursite.com/about/index.html","excerpt":"","text":"1渡劫中的IT工程师"},{"title":"书单","date":"2020-03-27T02:50:32.979Z","updated":"2020-03-27T02:50:32.979Z","comments":true,"path":"books/index.html","permalink":"http://yoursite.com/books/index.html","excerpt":"","text":""},{"title":"分类","date":"2020-03-27T02:50:32.979Z","updated":"2020-03-27T02:50:32.979Z","comments":false,"path":"categories/index.html","permalink":"http://yoursite.com/categories/index.html","excerpt":"","text":""},{"title":"友情链接","date":"2020-03-27T02:50:32.979Z","updated":"2020-03-27T02:50:32.979Z","comments":true,"path":"links/index.html","permalink":"http://yoursite.com/links/index.html","excerpt":"","text":""},{"title":"项目","date":"2020-03-27T02:50:32.979Z","updated":"2020-03-27T02:50:32.979Z","comments":false,"path":"repository/index.html","permalink":"http://yoursite.com/repository/index.html","excerpt":"","text":""},{"title":"标签","date":"2020-03-27T02:50:32.979Z","updated":"2020-03-27T02:50:32.979Z","comments":false,"path":"tags/index.html","permalink":"http://yoursite.com/tags/index.html","excerpt":"","text":""}],"posts":[{"title":"编程书单","slug":"编程书单","date":"2019-03-18T20:19:36.000Z","updated":"2020-03-27T02:50:32.979Z","comments":true,"path":"2019/03/18/编程书单/","link":"","permalink":"http://yoursite.com/2019/03/18/编程书单/","excerpt":"","text":"书单 C语言Linux C编程一站式学习C语言问题集 Go语言Go指南Go Web编程Go简易教程Go语言标准库Go实战开发 DockerDocker容器 技巧100个gdb小技巧100个gcc小技巧SVN手册","categories":[{"name":"书单","slug":"书单","permalink":"http://yoursite.com/categories/书单/"}],"tags":[{"name":"理论","slug":"理论","permalink":"http://yoursite.com/tags/理论/"}]},{"title":"Linux上的用户管理","slug":"Linux上的用户管理","date":"2019-02-28T01:00:25.000Z","updated":"2020-03-27T02:50:32.975Z","comments":true,"path":"2019/02/28/Linux上的用户管理/","link":"","permalink":"http://yoursite.com/2019/02/28/Linux上的用户管理/","excerpt":"","text":"Linux上的用户管理 在开发过程中经常会出现人员的流动.为了保证数据安全性和环境的稳定性,需要为新加入成员添加账号,在人员离开时也要进行账号的销毁. 相关概念用户组: 用户: 查看用户和用户组1234# 查看系统所有用户组$cat /etc/group# 查看系统所有用户$cat /etc/shadow 新建用户123$useradd username -d /home/username -g usergroup$passwd username //密码$gpasswd -a username usergroup 删除用户1$userdel username useradd和adduser的区别 CentOS下两个命令没有区别,在Ubuntu系统下useradd添加用户不会自动设置用户目录和shell版本,userdel和deluser类似. root用户添加添加root用户权限","categories":[{"name":"操作系统","slug":"操作系统","permalink":"http://yoursite.com/categories/操作系统/"}],"tags":[{"name":"项目管理","slug":"项目管理","permalink":"http://yoursite.com/tags/项目管理/"}]},{"title":"adb命令的使用","slug":"adb命令的使用","date":"2019-02-24T23:00:45.000Z","updated":"2020-03-27T02:50:32.975Z","comments":true,"path":"2019/02/24/adb命令的使用/","link":"","permalink":"http://yoursite.com/2019/02/24/adb命令的使用/","excerpt":"","text":"ADB工具的使用","categories":[{"name":"软件使用","slug":"软件使用","permalink":"http://yoursite.com/categories/软件使用/"}],"tags":[{"name":"工具","slug":"工具","permalink":"http://yoursite.com/tags/工具/"}]},{"title":"VSCode的插件整理","slug":"VSCode的插件整理","date":"2019-02-21T22:23:01.000Z","updated":"2020-03-27T02:50:32.975Z","comments":true,"path":"2019/02/21/VSCode的插件整理/","link":"","permalink":"http://yoursite.com/2019/02/21/VSCode的插件整理/","excerpt":"","text":"VS Code语言插件中文插件问题1.28版本的vscode无法使用最新的简体中文插件手动安装地址 Win32上C/C++插件的扩展解决办法componentclangformatdebug 背景颜色配置Bracket主题插件204 232 207 #CCE8CF","categories":[{"name":"软件使用","slug":"软件使用","permalink":"http://yoursite.com/categories/软件使用/"}],"tags":[{"name":"软件","slug":"软件","permalink":"http://yoursite.com/tags/软件/"}]},{"title":"Go中go test总结","slug":"Go中go-test总结","date":"2019-02-04T15:39:08.000Z","updated":"2020-03-27T02:50:32.975Z","comments":true,"path":"2019/02/04/Go中go-test总结/","link":"","permalink":"http://yoursite.com/2019/02/04/Go中go-test总结/","excerpt":"","text":"Go测试依赖Go的规则在Go工程中,以_或者.符号作为文件名的首字母时,会被构建工具忽略.go工具会忽略testdata目录,使其可以保存所需的辅助数据.使用testing包 分类分为三类: 测试函数 测试程序的一些接口是否正确 基准测试函数 衡量接口的性能 例子函数 函数使用 go test参数","categories":[{"name":"Go","slug":"Go","permalink":"http://yoursite.com/categories/Go/"}],"tags":[{"name":"Go语言","slug":"Go语言","permalink":"http://yoursite.com/tags/Go语言/"}]},{"title":"Go样例整理","slug":"Go样例整理","date":"2019-02-03T13:28:37.000Z","updated":"2020-03-27T02:50:32.975Z","comments":true,"path":"2019/02/03/Go样例整理/","link":"","permalink":"http://yoursite.com/2019/02/03/Go样例整理/","excerpt":"","text":"Go样例Go项目配置durafmt下载1go get github.com/hako/durafmt","categories":[{"name":"Go","slug":"Go","permalink":"http://yoursite.com/categories/Go/"}],"tags":[{"name":"Go语言","slug":"Go语言","permalink":"http://yoursite.com/tags/Go语言/"}]},{"title":"Logkit部署","slug":"Logkit部署","date":"2019-01-31T08:28:55.000Z","updated":"2020-03-27T02:50:32.975Z","comments":true,"path":"2019/01/31/Logkit部署/","link":"","permalink":"http://yoursite.com/2019/01/31/Logkit部署/","excerpt":"","text":"七牛开源的Logkit社区版本的部署","categories":[{"name":"开源代码","slug":"开源代码","permalink":"http://yoursite.com/categories/开源代码/"}],"tags":[{"name":"Go语言","slug":"Go语言","permalink":"http://yoursite.com/tags/Go语言/"}]},{"title":"Css布局之双飞翼和圣杯布局","slug":"Css布局之双飞翼和圣杯布局","date":"2019-01-29T09:19:49.000Z","updated":"2020-03-27T02:50:32.975Z","comments":true,"path":"2019/01/29/Css布局之双飞翼和圣杯布局/","link":"","permalink":"http://yoursite.com/2019/01/29/Css布局之双飞翼和圣杯布局/","excerpt":"","text":"目前的布局现状双飞翼布局三栏布局,当窗口变化时,左右两翼不发生变化. 圣杯布局Flex布局阮一峰关于Flex布局的整理 绝对移动","categories":[{"name":"前端","slug":"前端","permalink":"http://yoursite.com/categories/前端/"}],"tags":[{"name":"node","slug":"node","permalink":"http://yoursite.com/tags/node/"}]},{"title":"基础页面布局整理","slug":"基础页面布局整理","date":"2019-01-27T17:07:40.000Z","updated":"2020-03-27T02:50:32.979Z","comments":true,"path":"2019/01/27/基础页面布局整理/","link":"","permalink":"http://yoursite.com/2019/01/27/基础页面布局整理/","excerpt":"","text":"基础页面布局整理","categories":[{"name":"前端","slug":"前端","permalink":"http://yoursite.com/categories/前端/"}],"tags":[{"name":"node","slug":"node","permalink":"http://yoursite.com/tags/node/"}]},{"title":"前端布局","slug":"前端布局","date":"2019-01-25T20:57:29.000Z","updated":"2020-03-27T02:50:32.979Z","comments":true,"path":"2019/01/25/前端布局/","link":"","permalink":"http://yoursite.com/2019/01/25/前端布局/","excerpt":"","text":"页面布局盒子模型边框(border)内边距(padding)外边距(margin) box-sizing定义盒子模型的大小 display定义了一个元素显示类型,包含了生成盒子模型的两个基础特性. outer display type - 定义外部的布局 inner display type - 定义盒子内部子元素的布局 符号 解释 flex 弹性布局 flow Vue中的特殊属性ref用于注册一个元素或子组件的参照.这个参照将会注册到父组件中的$refs对象.如果用于文本DOM元素,这个参照就是那个元素.如果用于子组件,这个参照就是那个子组件实例.","categories":[{"name":"前端","slug":"前端","permalink":"http://yoursite.com/categories/前端/"}],"tags":[{"name":"node","slug":"node","permalink":"http://yoursite.com/tags/node/"}]},{"title":"Vue项目的编码规范","slug":"Vue项目的编码规范","date":"2019-01-25T16:50:30.000Z","updated":"2020-03-27T02:50:32.975Z","comments":true,"path":"2019/01/25/Vue项目的编码规范/","link":"","permalink":"http://yoursite.com/2019/01/25/Vue项目的编码规范/","excerpt":"","text":"Vue项目的编码规范Vue项目中的文件结构assets和static目录的区别 src/assets 静态资源文件夹,这里的资源会被webpack构建static 纯静态资源,不会被webpack构建","categories":[{"name":"前端","slug":"前端","permalink":"http://yoursite.com/categories/前端/"}],"tags":[{"name":"node","slug":"node","permalink":"http://yoursite.com/tags/node/"}]},{"title":"Scss使用","slug":"Scss使用","date":"2019-01-25T14:05:11.000Z","updated":"2020-03-27T02:50:32.975Z","comments":true,"path":"2019/01/25/Scss使用/","link":"","permalink":"http://yoursite.com/2019/01/25/Scss使用/","excerpt":"","text":"简介使用","categories":[{"name":"前端","slug":"前端","permalink":"http://yoursite.com/categories/前端/"}],"tags":[{"name":"node","slug":"node","permalink":"http://yoursite.com/tags/node/"}]},{"title":"UML使用","slug":"UML使用","date":"2019-01-25T10:19:08.000Z","updated":"2020-03-27T02:50:32.975Z","comments":true,"path":"2019/01/25/UML使用/","link":"","permalink":"http://yoursite.com/2019/01/25/UML使用/","excerpt":"","text":"[TOC] 链接StarUML的逆向思维 starUML图类划分 StarUML 图分类 软件工程开发前先做好详细设计,再按照详细设计进行开发,就是正向开发 先完成代码开发,再补充文档是逆向思维 使用样例为一个类添加一个构造和析构方法构造函数之前要加上&lt;&gt;，在析构函数之前要加上&lt;&gt;，或者使用上图属性对话框中的Steorotype添加&lt;&gt;和&lt;&gt; Live555的源码逆向导入toc: falsedate: 2018-11-25 12:59:41 description:UML使用 [TOC] 链接StarUML的逆向思维 starUML图类划分 StarUML 图分类StarUML破解使用 软件工程开发前先做好详细设计,再按照详细设计进行开发,就是正向开发 先完成代码开发,再补充文档是逆向思维 使用样例为一个类添加一个构造和析构方法构造函数之前要加上&lt;&gt;，在析构函数之前要加上&lt;&gt;，或者使用上图属性对话框中的Steorotype添加&lt;&gt;和&lt;&gt; Live555的源码逆向导入","categories":[{"name":"操作系统","slug":"操作系统","permalink":"http://yoursite.com/categories/操作系统/"}],"tags":[{"name":"项目管理","slug":"项目管理","permalink":"http://yoursite.com/tags/项目管理/"}]},{"title":"ubuntu_18.04LST上的使用问题","slug":"ubuntu-18-04LST上的使用问题","date":"2019-01-25T08:32:38.000Z","updated":"2020-03-27T02:50:32.975Z","comments":true,"path":"2019/01/25/ubuntu-18-04LST上的使用问题/","link":"","permalink":"http://yoursite.com/2019/01/25/ubuntu-18-04LST上的使用问题/","excerpt":"","text":"18.04LST上安装google浏览器 下载google的deb包 root用户无法使用,可以在运行后添加–non-sandbox选项. 18.04LST上运行sslocal失败 * 安装shadowsocks$ sudo pip install shadowsocks * 配置shadowsocks{ &quot;server&quot;: &quot;&quot;, &quot;server_port&quot;:, &quot;password&quot;: &quot;&quot;, &quot;local_address&quot;:&quot;127.0.0.1&quot;, &quot;timeout&quot;:600, &quot;method&quot;: &quot;aes-256-cfb&quot; } * 启动shadowsocks$sudo sslocal -c /etc/shadowsocks.json -d -start 由于在openssl1.1.0版本中,废弃了EVP_CIPHER_CTX_cleanup函数/usr/local/lib/python2.7/dist-packages/shadowsocks/crypto/openssl.py文件中将libcrypto.EVP_CIPHER_CTX_cleanup替换成libcrypto.EVP_CIPHER_CTX_reset","categories":[{"name":"操作系统","slug":"操作系统","permalink":"http://yoursite.com/categories/操作系统/"}],"tags":[{"name":"项目管理","slug":"项目管理","permalink":"http://yoursite.com/tags/项目管理/"}]},{"title":"Mac使用","slug":"Mac使用","date":"2019-01-25T08:28:16.000Z","updated":"2020-03-27T02:50:32.975Z","comments":true,"path":"2019/01/25/Mac使用/","link":"","permalink":"http://yoursite.com/2019/01/25/Mac使用/","excerpt":"","text":"@[TOC] Dash官网 MountyiTerm2sock5代理1$brew install shadowsocks-libev 配置代理服务器配置/usr/local/etc/shadowsocks-libev.json 设置开机启动ln -s /usr/local/opt/shadowsocks-libev/homebrew.mxcl.shadowsocks-libev.plist ~/Library/LaunchAgents/homebrew.mxcl.shadowsocks-libev.plist 加载配置文件launchctl load ~/Library/LaunchAgents/homebrew.mxcl.shadowsocks-libev.plist 使用privoxy来实现shadowsocks向http代理brew install privoxy","categories":[{"name":"操作系统","slug":"操作系统","permalink":"http://yoursite.com/categories/操作系统/"}],"tags":[{"name":"软件","slug":"软件","permalink":"http://yoursite.com/tags/软件/"}]},{"title":"Lex和Yacc的入门","slug":"Lex和Yacc的入门","date":"2019-01-25T08:04:17.000Z","updated":"2020-03-27T02:50:32.975Z","comments":true,"path":"2019/01/25/Lex和Yacc的入门/","link":"","permalink":"http://yoursite.com/2019/01/25/Lex和Yacc的入门/","excerpt":"","text":"@[toc] lex和yacc简介lex和yacc是自动编译C代码的工具,适合于解析简单语言.这些工具常用于编译器或者解释器的组成部分，或者用于读取配置文件.“lex”和“yacc”这两个名字所代表的也包括这些工具的 GNU 版本 flex 和 bison. lex 和 yacc 是一对配对工具。lex 将文件分解为成组的“记号（tokens）”，大体上类似于单词。yacc 接受 成组的记号，并将它们装配为高层次的结构，类似于句子。yacc 设计用来处理 lex 的输出，不过您也可以 编写自己的代码来完成此任务。同样，lex 的输出很大程度上设计用于为某类解析器提供数据。 lex使用Lex语法分析 yacc使用实例应用使用的是linux系统下的flex和bison,它们是lex和yacc的加强版.calculator.l的源码 12345678910111213141516171819202122232425262728%&#123; #include &lt;stdio.h&gt; #include \"y.tab.h\" int yywrap(void) &#123; return 1; &#125; %&#125; %% \"+\" return ADD; \"-\" return SUB; \"*\" return MUL; \"/\" return DIV; \"\\n\" return CR; ([1-9][0-9]*)|0|([0-9]+\\.[0-9]*) &#123; double temp; sscanf(yytext, \"%lf\", &amp;temp); yylval.double_value = temp; return DOUBLE_LITERAL; &#125; [ \\t] ; . &#123; fprintf(stderr, \"lexical error.\\n\"); exit(1); &#125; %% calculator.y源码123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566%&#123; #include&lt;stdio.h&gt; #include&lt;stdlib.h&gt; #define YYDEBUG 1 %&#125; %union &#123; int int_value; double double_value; &#125; %token &lt;double_value&gt; DOUBLE_LITERAL %token ADD SUB MUL DIV CR %type &lt;double_value&gt; expression term primary_expression %% line_list : line | line_list line ; line : expression CR &#123; printf(\"&gt;&gt;%lf\\n\",$1); &#125; expression : term | expression ADD term &#123; $$=$1+$3; &#125; | expression SUB term &#123; $$=$1-$3; &#125; ; term : primary_expression | term MUL primary_expression &#123; $$=$1*$3; &#125; | term DIV primary_expression &#123; $$=$1/$3; &#125; ; primary_expression : DOUBLE_LITERAL ; %% int yyerror(char const *str) &#123; extern char *yytext; fprintf(stderr,\"parser error near %s\\n\",yytext); return 0; &#125; int main(void) &#123; extern int yyparse(void); extern FILE *yyin; yyin=stdin; if(yyparse())&#123; fprintf(stderr,\"Error! Error! Error!\\n\"); exit(1); &#125; &#125; 操作命令 $bison -ydv calculator.y $flex calculator.l $gcc -o calc y.tab.c lex.yy.c","categories":[{"name":"开源代码","slug":"开源代码","permalink":"http://yoursite.com/categories/开源代码/"}],"tags":[{"name":"软件","slug":"软件","permalink":"http://yoursite.com/tags/软件/"}]},{"title":"Python网络入门","slug":"Python网络入门","date":"2019-01-25T08:02:05.000Z","updated":"2020-03-27T02:50:32.975Z","comments":true,"path":"2019/01/25/Python网络入门/","link":"","permalink":"http://yoursite.com/2019/01/25/Python网络入门/","excerpt":"","text":"@[toc] Python网络入门python的网络结构和C和C++的网络模型是一样的. 123456789101112131415161718from socket import *TCP: AF_INET SOCK_STREAM 服务器模型:1.绑定地址和端口 2.监听 3.Accept 4.recv 5.send 6.close 客户端模型:1.Connect 2.send 3.recv 4.closeUDP: AF_INET SOCK_DGRAM 服务器模型:1.bind 2.recvfrom 3.sendto 4.close 客户端模型:1.sendto 2.recvfrom 3.closePython封装:from SocketServer import TCPServer as TCP, StreamRequestHandler as SRH 服务器模型: class MyRequestHandler(SRH): def handle(self): print '...connected from: ', self.client_address self.wfile.write('[%s] %s' % (ctime(), self.rfile.readline())) TCPServ = TCP(ADDR, MyRequestHandler) TCPServ.serve_forever() 客户端模型:","categories":[{"name":"操作系统","slug":"操作系统","permalink":"http://yoursite.com/categories/操作系统/"}],"tags":[{"name":"网络","slug":"网络","permalink":"http://yoursite.com/tags/网络/"}]},{"title":"Strace使用","slug":"Strace使用","date":"2019-01-25T07:58:52.000Z","updated":"2020-03-27T02:50:32.975Z","comments":true,"path":"2019/01/25/Strace使用/","link":"","permalink":"http://yoursite.com/2019/01/25/Strace使用/","excerpt":"","text":"@[TOC] Strace的使用Strace诊断 命令strace -p strace -cp strace用于追踪系统调用和信号量.在调试时，strace是一个可以采集上下文的实用工具.1.strace PTRACE_TRACEME EPERM (Operation not permitted)你应该以root权限运行strace，如果你收到这条消息，这意味着在你当前系统上不允许绑定进程.解决办法:1.sudo bash -c ‘echo 0 &gt; /proc/sys/kernel/yama/ptrace_scope’2.检查文件/etc/sysctl.d/10-ptrace.conf,将其权限改为可读3.kernel.yama.ptrace_scope = 0如果没有那个文件打开/etc/sysctl/conf，查找设置kernrl.yama.ptrace_scope 存在将其值设为0，如果不支持添加一行kernel.yama.ptrace_scope = 0 追踪线程PID 追踪进程$ strace -p [pid] 追踪进程和线程$ strace -fp [pid] 追踪进程和限定字符$ strace -s 80 -fp [pid] 追踪程序$ strace ./program$ strace -f ./program$ strace -s 80 -f ./program 过滤futex调用1.只是过滤futex$ strace -Tf ./program 2&gt;&amp;1 | grep -v futex2.过滤多个系统调用$ strace -Tfe strace=open,read,write ./program 其他实用选项-f 线程号-T 添加打印时间-t 打印时间-s [size] 指定显示长度-e strace=open,close 只追踪open和close系统调用. linux平台编译strace源码.1.下载strace-4.19.tar.xz2.解压，对于ARM平台，需要打补丁,暂时没有遇见过3.配置 ./configure –host=arm-linux CC=arm_v5t_le-gcc LD=arm_v5t_le-ld4.编译 make CFLAGS+=”-static”5.strip arm_v5t_le-strip","categories":[{"name":"调试","slug":"调试","permalink":"http://yoursite.com/categories/调试/"}],"tags":[{"name":"软件","slug":"软件","permalink":"http://yoursite.com/tags/软件/"}]},{"title":"Go语言项目Beego的学习","slug":"Go语言项目Beego的学习","date":"2019-01-25T07:47:47.000Z","updated":"2020-03-27T02:50:32.975Z","comments":true,"path":"2019/01/25/Go语言项目Beego的学习/","link":"","permalink":"http://yoursite.com/2019/01/25/Go语言项目Beego的学习/","excerpt":"","text":"@[TOC] beego的安装12345671. 下载beego安装go get github.com/astaxie/beego升级go get -u github.com/astaxie/beego2. 本地安装go install github.com/astaxie/beego 运行12go run ***.go 或go build ***.go","categories":[{"name":"Go","slug":"Go","permalink":"http://yoursite.com/categories/Go/"}],"tags":[{"name":"软件","slug":"软件","permalink":"http://yoursite.com/tags/软件/"}]},{"title":"Tcpdump编译","slug":"Tcpdump编译","date":"2019-01-25T07:34:40.000Z","updated":"2020-03-27T02:50:32.975Z","comments":true,"path":"2019/01/25/Tcpdump编译/","link":"","permalink":"http://yoursite.com/2019/01/25/Tcpdump编译/","excerpt":"","text":"@[toc]Tcpdump交叉编译libpcap包和tcpdump包 编译libpcap包1.解压 1tar -zxvf libpcap-1.4.0.tar.gz 2.配置生产makefile 1$./configure --host=arm-linux CC=arm-none-linux-gnueabi-gcc --with-pcap=linux 3.编译 1$make 编译tcpdump包1.解压 1tar -zxvf tcpdump-4.4.0.tar.gz 2.配置生成makefile 1$./configure --host=arm-linux CC=arm-none-linux-gnueabi-gcc --prefix=/root/tcpdump_tool 3.编译 1make ./configure时会自动查找到libpcap.a库 参数使用技巧后续再使用","categories":[{"name":"调试","slug":"调试","permalink":"http://yoursite.com/categories/调试/"}],"tags":[{"name":"工具","slug":"工具","permalink":"http://yoursite.com/tags/工具/"}]},{"title":"onvif资料整理","slug":"onvif资料整理","date":"2019-01-24T16:04:12.000Z","updated":"2020-03-27T02:50:32.975Z","comments":true,"path":"2019/01/24/onvif资料整理/","link":"","permalink":"http://yoursite.com/2019/01/24/onvif资料整理/","excerpt":"","text":"onvif资料整理##","categories":[{"name":"开源代码","slug":"开源代码","permalink":"http://yoursite.com/categories/开源代码/"}],"tags":[{"name":"理论","slug":"理论","permalink":"http://yoursite.com/tags/理论/"}]},{"title":"gulp入门","slug":"gulp入门","date":"2019-01-14T20:17:54.000Z","updated":"2020-03-27T02:50:32.975Z","comments":true,"path":"2019/01/14/gulp入门/","link":"","permalink":"http://yoursite.com/2019/01/14/gulp入门/","excerpt":"","text":"gulp入门简介自动化构建工具 使用 全局安装 1$ npm install --global gulp 项目依赖安装 1$ npm install --save-dev gulp 在根目录下创建一个名为gulpfile.js的文件 12345var gulp = require('gulp');gulp.task('default', function() &#123; // 将默认的任务代码放到这里&#125;); 运行gulp 1$ gulp","categories":[{"name":"前端","slug":"前端","permalink":"http://yoursite.com/categories/前端/"}],"tags":[{"name":"node","slug":"node","permalink":"http://yoursite.com/tags/node/"}]},{"title":"yarn入门","slug":"yarn入门","date":"2019-01-14T20:17:54.000Z","updated":"2020-03-27T02:50:32.975Z","comments":true,"path":"2019/01/14/yarn入门/","link":"","permalink":"http://yoursite.com/2019/01/14/yarn入门/","excerpt":"","text":"Yarn简介Yarn 是一个快速,可靠,安全的依赖管理. 极速 缓存它下载的每个包,不重复下载.还可以并行化操作以最大化资源利用率 超级安全 在每个安装包执行前使用校验码验证包的完整性 超级可靠 使用一个格式详尽但简洁的lockfile和一个精确的算法来安装,能够保证在一个系统上的运行的安装过程也会以同样的方式运行在其他系统上 与npm的区别Yarn 是由Facebook, Google, Exponent和Tilde联合推出了一个新的JS包管理工具,据官方描述, Yarn是为了弥补npm的一些缺陷而出现的. npm缺点: npm install安装慢,无法保证一致性 Yarn和npm命令对比 npm yarn npm install yarn npm install react –save yarn add react npm uninstall react –save yarn remove react npm install react –save-dev yarn add react –dev npm update –save yarn upgrade npm未来: npm5.0npm后续的改进 添加了类似yarn.lock的package-lock.json git依赖支持优化 文件依赖优化","categories":[{"name":"前端","slug":"前端","permalink":"http://yoursite.com/categories/前端/"}],"tags":[{"name":"node","slug":"node","permalink":"http://yoursite.com/tags/node/"}]},{"title":"Azure_DevOps入门","slug":"Azure-DevOps入门","date":"2019-01-13T14:38:36.000Z","updated":"2020-03-27T02:50:32.975Z","comments":true,"path":"2019/01/13/Azure-DevOps入门/","link":"","permalink":"http://yoursite.com/2019/01/13/Azure-DevOps入门/","excerpt":"","text":"Azure DevOpsAzure DevOps服务提供了开发协作工具,包括高性能管道,免费的私有Git存储库,可配置的看板,以及广泛的自动化和基于云的负载测试. 简介Azure DevOps的开始使用:1.使用Azure Pipelines去编辑GitHub工程2.开始使用Azure DevOps 使用入门Azure Pipelines编译一个Github仓库准备工作 一个Azure DevOps组织,如果没有可以免费创建一个, GitHub账号 获取源码开始第一次的编译 登陆Azure DevOps组织, 选中你的项目 选中Piplines页,选择新建pipeline 通过选择GitHub作为源代码的位置来完成向导的步骤 认证GitHub账号权限 当重回到Azure Pipelines页面,选择程序对应的存储库 Azure Pipelines在你的仓库中分析代码.如果仓库已经包含了一个azure-pipelines.yml文件,这一步将会被跳过.否则,Azure Pipelines会基于你的代码上会有一个模板 最后,你需要展示出将要使用的YAML文件 如果你看到Run按钮,选择它,跳到下一步.如果你看到Save and Run按钮,先选择Commit directly to the master branch,接着再选择Save and run. 等待编译完成 将CI状态徽章到你的仓库中 在Azure Pipelines页面中,进入到Build页面显示pipelines的列表. 选择你创建的pipelines 在pipelines的上下文菜单中,选择Status badge项 拷贝到Markdown中 使用技巧特性分析相关链接","categories":[{"name":"版本管理","slug":"版本管理","permalink":"http://yoursite.com/categories/版本管理/"}],"tags":[{"name":"项目管理","slug":"项目管理","permalink":"http://yoursite.com/tags/项目管理/"}]},{"title":"译文_C?Go?Cgo","slug":"译文-C-Go-Cgo","date":"2019-01-01T21:03:17.000Z","updated":"2020-03-27T02:50:32.979Z","comments":true,"path":"2019/01/01/译文-C-Go-Cgo/","link":"","permalink":"http://yoursite.com/2019/01/01/译文-C-Go-Cgo/","excerpt":"","text":"C?Go?Cgo2011/03/17 引言Go中的Cgo工具让Go包可以调用C代码.在Go源码中使用特定的格式,cgo可以将Go和C文件组合成一个单一的Go包. 举个例子,下面的Go包中有调用C的random和srandom组成的Random和Seed两个函数. 1234567891011121314package rand/*#include &lt;stdlib.h&gt;*/import \"C\"func Random() int &#123; return int(C.random())&#125;func Seed(i int) &#123; C.srandom(C.uint(i))&#125; 下面我们来从import状态开始分析一下发生些什么情况. rand包import “C”. 你在Go的标准库中是无法找到”C”对应的包的.这是因为C是一个”伪包”.此处的C伪包是一个C代码的参考,被cgo工具解析. rand包中包含了C包中的4个调用. C.random, C.srandom, C.uint(i)转换和import状态 Random函数调用C标准库中的random函数,返回了一个结果.在C中, random返回得是C类型中的long,所有cgo会把这个类型写成C.long.如果想在包外使用这个参数,必须要转换成Go的参数类型.使用一个普通的Go类型转换 123func Random() int &#123; return int(C.random())&#125; 等价下面使用临时变量转换 1234func Random() int &#123; var r C.long = C.random() return int(r)&#125; Seed函数相反.它获取到一个Go中int类型,将它转换成C中的unsigned int类型,再把转换后的参数传入C的srandom函数中. 123func Seed(i int) &#123; C.srandom(C.uint(i))&#125; 注意: cgo知道unsigned int类型是C.uint类型. 这个例子中我们还没有分析import状态行上的注释 1234/*#include &lt;stdlib.h&gt;*/import \"C\" Cgo可以识别这个注释.任何以#cgo开始后面接有空格字符的行将会被移除.这些行变成了cgo的指令.在编译这个包中C部分的代码时,剩余行会变成头部分.在这个例子中,这些行就是#include,也可以是任何的C代码.当编译包中的C部分时,#cgo指令对于编辑器和链接器提供标识. 这里还有一个限制条件:如果你的程序中使用了任何一个//export指令,在注释上的C代码将只会包含声明,没有定义.你可以使用//export指令让Go函数能访问到C代码. #cgo和//export指令可以在cgo文档中查看. Strings 和 things不像Go, C没有一个明确的string类型.在C中字符串使用以’\\0’表示符结尾的字符数组. Go和C中的字符串转换使用C.CString, C.GoString, 和C.GoStringN函数.这些转换就是对一个字符传数据的一个拷贝. 下面这个例子是实现了一个Print函数,将字符串使用C中stdio库的fputs显示到标准输出. 123456789101112package print// #include &lt;stdio.h&gt;// #include &lt;stdlib.h&gt;import \"C\"import \"unsafe\"func Print(s string) &#123; cs := C.CString(s) C.fputs(cs, (*C.FILE)(C.stdout)) C.free(unsafe.Pointer(cs))&#125; Go的内存管理器无法知道C代码的内存分配.当我们使用C.CString创建一个C的字符串时,必须要记得在适当的位置使用C.free进行释放. 调用C.CString返回了一个指向字符数组开始地方的指针,所以在这个函数退出前,我们要将它转换成unsafe.Pointer和使用C.free使用内存.在cgo程序中处理内存释放的一个惯用方法是在分配内存后立即使用defer去释放.Print可以改写成 12345func Print(s string) &#123; cs := C.CString(s) defer C.free(unsafe.Pointer(cs)) C.fputs(cs, (*C.FILE)(C.stdout))&#125; 编译cgo包编译cgo包和编译其他包一样,使用go build或go install.go工具识别import “C”自动使用cgo去编译对应的文件 cgo的其他资源[cgo commond](https://golang.org/cmd/cgo/) [cgo example](https://golang.org/misc/cgo/) 如果想了解cgo的内部工作原理,可以看下cgocall.go文件.","categories":[{"name":"Go","slug":"Go","permalink":"http://yoursite.com/categories/Go/"}],"tags":[{"name":"Go语言","slug":"Go语言","permalink":"http://yoursite.com/tags/Go语言/"}]},{"title":"python整理","slug":"python整理","date":"2018-12-27T13:24:38.000Z","updated":"2020-03-27T02:50:32.975Z","comments":true,"path":"2018/12/27/python整理/","link":"","permalink":"http://yoursite.com/2018/12/27/python整理/","excerpt":"","text":"","categories":[],"tags":[{"name":"python","slug":"python","permalink":"http://yoursite.com/tags/python/"}]},{"title":"Rapberry使用","slug":"Rapberry使用","date":"2018-12-26T13:45:33.000Z","updated":"2020-03-27T02:50:32.975Z","comments":true,"path":"2018/12/26/Rapberry使用/","link":"","permalink":"http://yoursite.com/2018/12/26/Rapberry使用/","excerpt":"","text":"简介主页","categories":[],"tags":[{"name":"linux","slug":"linux","permalink":"http://yoursite.com/tags/linux/"}]},{"title":"Samba网络问题定位","slug":"Samba网络问题定位","date":"2018-12-25T20:34:43.000Z","updated":"2020-03-27T02:50:32.975Z","comments":true,"path":"2018/12/25/Samba网络问题定位/","link":"","permalink":"http://yoursite.com/2018/12/25/Samba网络问题定位/","excerpt":"","text":"现象描述ubuntu18.04在使用docker和docker-machine后出现了多个网卡,win10上的samba客户端连接不上. 问题定位通讯流程跟踪win10客户端上的抓包 分析: 服务器返回Destination unreachable ubuntu服务器抓包tcpdump实时抓包分析,接收有打印. 协议对比根据抓包分析,应该还没有到smb交互协议部分. 结论通过对之前的操作进行分析,是安装了firewalld软件导致.卸载firewalld之后通讯流程就正常了.","categories":[{"name":"Linux","slug":"Linux","permalink":"http://yoursite.com/categories/Linux/"}],"tags":[{"name":"Bug定位","slug":"Bug定位","permalink":"http://yoursite.com/tags/Bug定位/"}]},{"title":"docker入门","slug":"docker入门","date":"2018-12-24T20:06:03.000Z","updated":"2020-03-27T02:50:32.975Z","comments":true,"path":"2018/12/24/docker入门/","link":"","permalink":"http://yoursite.com/2018/12/24/docker入门/","excerpt":"","text":"简介Docker 是世界领先的软件容器平台。开发人员利用 Docker 可以消除协作编码时“在我的机器上可正常工作”的问题。运维人员利用 Docker 可以在隔离容器中并行运行和管理应用，获得更好的计算密度。企业利用 Docker 可以构建敏捷的软件交付管道，以更快的速度、更高的安全性和可靠的信誉为 Linux 和 Windows Server 应用发布新功能。 中文官网 DockerHub 安装Ubuntu上的安装123456789101112131415161718192021// 卸载旧版本$apt-get remove docker docker-engine docker.io// 使用存储库进行安装$ apt-get install \\ apt-transport-https \\ ca-certificates \\ curl \\ software-properties-common// 添加Docker的官方GPG密钥$ curl -fsSL https://mirrors.ustc.edu.cn/docker-ce/linux/ubuntu/gpg | sudo apt-key add -// 添加Docker软件源$ sudo add-apt-repository \\ \"deb [arch=amd64] https://mirrors.ustc.edu.cn/docker-ce/linux/ubuntu \\ $(lsb_release -cs) \\ stable\"$sudo apt-get install docker-ce// 运行hello-world$docker run hello-world// 以非root用户身份运行docker$sudo groupadd docker$sudo usermod -aG docker $USER 使用部署 使用中国的官方镜像加速123456// 守护进程传参$ docker --registry-mirror=https://registry.docker-cn.com daemon// 通过配置项来修改 /etc/docker/daemon.json&#123; \"registry-mirrors\": [\"https://registry.docker-cn.com\"]&#125; docker远程仓库的使用12$docker tag local-image:tagname new-repo:tagname$docker push new-repo:ragname 构建应用创建Dockerfile, app.py, requirements.txt 1$docker build -t friendlyhello . 运行应用-d 后台运行 -p 内外端口映射 1$docker run -d -p 4000:80 friendlyhello 停止服务 12$docker ps$docker stop $&#123;CONTAINER ID&#125; 服务1234567891011121314151617181920# docker-compose.ymlversion: \"3\"services: web: # 将 username/repo:tag 替换为您的名称和镜像详细信息 image: username/repository:tag deploy: replicas: 5 resources: limits: cpus: \"0.1\" memory:50M restart_policy: condition: on-failure ports: - \"80:80\" networks: - webnetnetworks: webnet: 运行新的应用 123456$docker swarm init// 部署应用$docker stack deploy -c docker-compose.yml getstartedlab// 查看服务容器列表$docker stack ps getstartedlab// 修改docker-compose.yml参数再部署应用就是更新 清除应用 1234// 删除应用$docker stack rm getstartedlab// 清除swarm$docker swarm leave --force swarm集群利用Virtualbox来创建 VirtualBox安装 1$wget -q https://www.virtualbox.org/download/oracle_vbox_2016.asc -O- | sudo apt-key add - docker-machine安装 1https://github.com/docker/machine/releases/ 123// 创建一对VMdocker-machine create --driver virtualbox myvm1docker-machine create --driver virtualbox myvm2 myvm1发送命令 123$docker-machine ssh myvm1 \"docker swarm init\"// --advertise-addr错误的解决$docker-machine ssh myvm1 \"docker swarm init --advertise-addr 192.168.99.100:2377\" 技术栈123456789101112131415161718192021222324252627282930version: \"3\"services: web: # 将 username/repo:tag 替换为您的名称和镜像详细信息 image: huguanghui/helltest:latest deploy: replicas: 5 resources: limits: cpus: \"0.1\" memory: 50M restart_policy: condition: on-failure ports: - \"80:80\" networks: - webnet visualizer: image: dockersamples/visualizer:stable ports: - \"8080:8080\" volumes: - \"/var/run/docker.sock:/var/run/docker.sock\" deploy: placement: constraints: [node.role == manager] networks: - webnetnetworks: webnet: 技巧总结查看本地Docker镜像库1$docker images 常用命令1234567891011121314151617docker build -t friendlyname .# 使用此目录的 Dockerfile 创建镜像docker run -p 4000:80 friendlyname # 运行端口 4000 到 90 的“友好名称”映射docker run -d -p 4000:80 friendlyname # 内容相同，但在分离模式下docker ps # 查看所有正在运行的容器的列表docker stop &lt;hash&gt; # 平稳地停止指定的容器docker ps -a # 查看所有容器的列表，甚至包含未运行的容器docker kill &lt;hash&gt; # 强制关闭指定的容器docker rm &lt;hash&gt; # 从此机器中删除指定的容器docker rm $(docker ps -a -q) # 从此机器中删除所有容器docker images -a # 显示此机器上的所有镜像docker rmi &lt;imagename&gt; # 从此机器中删除指定的镜像docker rmi $(docker images -q) # 从此机器中删除所有镜像docker login # 使用您的 Docker 凭证登录此 CLI 会话docker tag &lt;image&gt; username/repository:tag # 标记 &lt;image&gt; 以上传到镜像库docker push username/repository:tag # 将已标记的镜像上传到镜像库docker run username/repository:tag # 运行镜像库中的镜像docker search &lt;key&gt; # 搜索docker镜像","categories":[{"name":"操作系统","slug":"操作系统","permalink":"http://yoursite.com/categories/操作系统/"}],"tags":[{"name":"软件","slug":"软件","permalink":"http://yoursite.com/tags/软件/"}]},{"title":"Kafka使用","slug":"Kafka使用","date":"2018-12-24T14:13:57.000Z","updated":"2020-03-27T02:50:32.975Z","comments":true,"path":"2018/12/24/Kafka使用/","link":"","permalink":"http://yoursite.com/2018/12/24/Kafka使用/","excerpt":"","text":"简介kafka是一个实时数据管道和流应用.特点:水平扩展,容错,极为迅速 3个关键能力: 发布和订阅记录流 以一种容错和持久化方式来存储记录流 记录实时流 4个核心APIs Producer API Consumer API Streams API Connector API 官网 Kafka的界面 https://github.com/quantifind/KafkaOffsetMonitor/releases/download/v0.2.0/KafkaOffsetMonitor-assembly-0.2.0.jar","categories":[{"name":"操作系统","slug":"操作系统","permalink":"http://yoursite.com/categories/操作系统/"}],"tags":[{"name":"项目管理","slug":"项目管理","permalink":"http://yoursite.com/tags/项目管理/"}]},{"title":"TravisCI使用","slug":"TravisCI使用","date":"2018-12-24T11:37:33.000Z","updated":"2020-03-27T02:50:32.975Z","comments":true,"path":"2018/12/24/TravisCI使用/","link":"","permalink":"http://yoursite.com/2018/12/24/TravisCI使用/","excerpt":"","text":"简介Travis CI是开源持续集成构建项目.可以直接使用github登陆.支持的语言nodejs,Go. 官网 阮一峰的Travis CI教程 配置文件生命周期 Go语言123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263language: gogo: - \"1.10.x\" - \"1.11.x\"services: - redis-server - mysql - postgresql - memcachedenv: - ORM_DRIVER=sqlite3 ORM_SOURCE=$TRAVIS_BUILD_DIR/orm_test.db - ORM_DRIVER=postgres ORM_SOURCE=\"user=postgres dbname=orm_test sslmode=disable\"before_install: - git clone git://github.com/ideawu/ssdb.git - cd ssdb - make - cd ..install: - go get github.com/lib/pq - go get github.com/go-sql-driver/mysql - go get github.com/mattn/go-sqlite3 - go get github.com/bradfitz/gomemcache/memcache - go get github.com/gomodule/redigo/redis - go get github.com/beego/x2j - go get github.com/couchbase/go-couchbase - go get github.com/beego/goyaml2 - go get gopkg.in/yaml.v2 - go get github.com/belogik/goes - go get github.com/siddontang/ledisdb/config - go get github.com/siddontang/ledisdb/ledis - go get github.com/ssdb/gossdb/ssdb - go get github.com/cloudflare/golz4 - go get github.com/gogo/protobuf/proto - go get github.com/Knetic/govaluate - go get github.com/casbin/casbin - go get github.com/elazarl/go-bindata-assetfs - go get -u honnef.co/go/tools/cmd/gosimple - go get -u github.com/mdempsky/unconvert - go get -u github.com/gordonklaus/ineffassign - go get -u github.com/golang/lint/golint - go get -u github.com/go-redis/redisbefore_script: - psql --version - sh -c \"if [ '$ORM_DRIVER' = 'postgres' ]; then psql -c 'create database orm_test;' -U postgres; fi\" - sh -c \"if [ '$ORM_DRIVER' = 'mysql' ]; then mysql -u root -e 'create database orm_test;'; fi\" - sh -c \"if [ '$ORM_DRIVER' = 'sqlite' ]; then touch $TRAVIS_BUILD_DIR/orm_test.db; fi\" - sh -c \"go get github.com/golang/lint/golint; golint ./...;\" - sh -c \"go list ./... | grep -v vendor | xargs go vet -v\" - mkdir -p res/var - ./ssdb/ssdb-server ./ssdb/ssdb.conf -dafter_script: - killall -w ssdb-server - rm -rf ./res/var/*script: - go test -v ./... - gosimple -ignore \"$(cat .gosimpleignore)\" $(go list ./... | grep -v /vendor/) - unconvert $(go list ./... | grep -v /vendor/) - ineffassign . - find . ! \\( -path './vendor' -prune \\) -type f -name '*.go' -print0 | xargs -0 gofmt -l -s - golint ./...addons: postgresql: \"9.6\"","categories":[],"tags":[{"name":"项目管理","slug":"项目管理","permalink":"http://yoursite.com/tags/项目管理/"}]},{"title":"qemu简介","slug":"qemu简介","date":"2018-12-23T09:34:02.000Z","updated":"2020-03-27T02:50:32.975Z","comments":true,"path":"2018/12/23/qemu简介/","link":"","permalink":"http://yoursite.com/2018/12/23/qemu简介/","excerpt":"","text":"简介qemu是一个通用和开源的机器仿真器和虚拟器. 三种使用: Full-system emulation 可以在所有支持的架构的机器上运行操作系统 User-mode emulation 在所有支持的架构上运行Linux/BSD程序 Virtualization 运行接近本机性能的KVM和Xen虚拟机 git仓库 wiki 源码安装1234567$git clone https://git.qemu.org/git/qemu.git$cd qemu$git submodule init$git submodule update --recursive$./configure$make$sudo make install 安装过程中遇到的问题: 1.glib缺少 sudo apt-get install libglib2.0-dev 2.ERROR: pixman &gt;= 0.21.8 not present.​ Please install the pixman devel package. 解决办法: apt-cache search pixman sudo apt install libpixman-1-dev 系统仿真只出现VNC server running on 127.0.0.1:5901 原因是缺少libsdl开发库 1$sudo apt-get install libsdl2-dev","categories":[{"name":"调试","slug":"调试","permalink":"http://yoursite.com/categories/调试/"}],"tags":[{"name":"工具","slug":"工具","permalink":"http://yoursite.com/tags/工具/"}]},{"title":"Go的学习进度","slug":"Go的学习进度","date":"2018-12-19T22:30:09.000Z","updated":"2020-03-27T02:50:32.975Z","comments":true,"path":"2018/12/19/Go的学习进度/","link":"","permalink":"http://yoursite.com/2018/12/19/Go的学习进度/","excerpt":"","text":"Go的学习进度Go的整体计划项目目标: 实现一个简易的RTSP服务器每日计划: 对一个开源代码的一段进行分析 2018/12/19RTSP服务器:实现了一个最简单的服务监听功能,能监听554端口,发送消息和响应消息 代码分析:(net中的tcpsock.go) 12345678910111213141516func ListenTCP(network string, laddr *TCPAddr) (*TCPListener, error) &#123; switch network &#123; case \"tcp\", \"tcp4\", \"tcp6\": default: return nil, &amp;OpError&#123;Op: \"listen\", Net: network, Source: nil, Addr: laddr.opAddr(), Err: UnknownNetworkError(network)&#125; &#125; if laddr == nil &#123; laddr = &amp;TCPAddr&#123;&#125; &#125; sl := &amp;sysListener&#123;network: network, address: laddr.String()&#125; ln, err := sl.listenTCP(context.Background(), laddr) if err != nil &#123; return nil, &amp;OpError&#123;Op: \"listen\", Net: network, Source: nil, Addr: laddr.opAddr(), Err: err&#125; &#125; return ln, nil&#125; 解析: 这是net中TCP监听的一段代码. 1.参数检测,network必须为”tcp”,”tcp4”,”tcp6”中的一种; laddr转换 2.进行监听,失败返回对于的错误信息. 问题点: &amp;OpError, &amp;TCPAddr{}和 &amp;sysListener的使用 ​ return 多个参数, 直接在函数定义的地方指定返回类型就可以了 增加： 2018-12-21： &amp;sysListener是Go语言中获取地址变量的一个技巧(问题: 实现了深拷贝,浅拷贝还是其他的方式) &amp;OpError按自己定义错误的一种使用方式(定义一个错误对象,实现错误的Error()方法) 对于错误的处理,尽量就立即返回 2018/12/20RTSP服务器: 更改结构将rtsp服务功能包化 代码分析:(net/http/header.go) 主要用于http的header头解析和时间格式的解析 12345678910111213141516171819202122232425262728293031func hasToken(v, token string) bool &#123; if len(token) &gt; len(v) || token == \"\" &#123; return false &#125; if v == token &#123; return true &#125; for sp := 0; sp &lt;= len(v)-len(token); sp++ &#123; // Check that first character is good. // The token is ASCII, so checking only a single byte // is sufficient. We skip this potential starting // position if both the first byte and its potential // ASCII uppercase equivalent (b|0x20) don't match. // False positives ('^' =&gt; '~') are caught by EqualFold. if b := v[sp]; b != token[0] &amp;&amp; b|0x20 != token[0] &#123; continue &#125; // Check that start pos is on a valid token boundary. if sp &gt; 0 &amp;&amp; !isTokenBoundary(v[sp-1]) &#123; continue &#125; // Check that end pos is on a valid token boundary. if endPos := sp + len(token); endPos != len(v) &amp;&amp; !isTokenBoundary(v[endPos]) &#123; continue &#125; if strings.EqualFold(v[sp:sp+len(token)], token) &#123; return true &#125; &#125; return false&#125; 功能描述: 查看v字符串中是不是包含token. 2018/12/21RTSP服务器: 参照http模块处理http请求的流程处理RTSP的处理 代码分析: 12345type onceCloseListener struct &#123; net.Listener //隐式声明 once sync.Once closeErr error&#125; 梳理http的框架结构 2018/12/23net/http中的ServeMux结构是一个http服务端对请求的URI做处理的一个多路复用器.","categories":[{"name":"Go","slug":"Go","permalink":"http://yoursite.com/categories/Go/"}],"tags":[{"name":"Go语言","slug":"Go语言","permalink":"http://yoursite.com/tags/Go语言/"}]},{"title":"Go环境搭建","slug":"Go环境搭建","date":"2018-12-13T21:53:35.000Z","updated":"2020-03-27T02:50:32.975Z","comments":true,"path":"2018/12/13/Go环境搭建/","link":"","permalink":"http://yoursite.com/2018/12/13/Go环境搭建/","excerpt":"","text":"Go环境搭建安装学习区块链 云服务和云存储 大数据开发 源码安装Go在树莓派上编译Go源码，查看编译完成后占用的大小 获取源码 编译源码 由两个Go的编译工具链,一个是gc,另一个是gccgo. Go编译器支持8种指令集. 运行Demo linux和Mac环境部署go的root包存放目录 /usr/local 在/etc/profile种添加PATH,GOROOT,GOPATH路径指定 12345678export PATH=$PATH:/usr/loca/go/binexport GOROOT=$(go env GOROOT)export GOPATH=$(go env GOPATH)export PATH=$PATH:$GOPATH/bin go之旅go官网上的一个Go编程指引功能 安装远程包1$ go get github.com/golang/example/hello govendor包管理工具123456789101112// 1.安装go get -u -v github.com/kardianos/govendor// 2.初始化cd project_dirgovendor initgovendor add +external// 3.下载govendor fetch 下载自身包和依赖包govendor get 下载自身包govendor add 从本地加载依赖包// 4.安装依赖包govendor sync .gitignore文件过滤条件 12/vendor/!/vendor/vendor.json .editorconfig配置1234567891011121314151617# http://editorconfig.orgroot = true[*]charset = utf-8end_of_line = lfinsert_final_newline = truetrim_trailing_whitespace = true[*.go]indent_style = tabindent_size = 4[*.yml]indent_style = spaceindent_size = 2 如何去写Go代码编译类型取消调试信息 go build -ldflags “-w” prog.go go编译器生成的代码包含内联函数调用和注册变量 在调试的时候需要关掉它们 go build -gcflags “-N -l” 编辑器和IDE工具LiteIDE VSCode 高效Go诊断使用gdb调试Go FAQGo相关的一个共性的问题 其他资源参考文档包文档以包的形式划分模块. 命令文档godoc将代码和文档保持一致. 1godoc -http=:6060 语法文档Go的特性切片入门: 切片是对数组的一个升级,每个切片的元素都是不定长的,同时可以插入. MapMap是一个类型变量的无序集合. Interface把所有共性的方法定义在一起,任何其他类型只要实现这些方法就是实现这个接口. Channel用于goroutine上的通信. 并发goroutine轻量级线程,与内核中的线程不是一个东西. goroutine的实现机制值得研究一下. Go的内存模型稳定版本的历史记录文章Go的Blog话题","categories":[{"name":"Go","slug":"Go","permalink":"http://yoursite.com/categories/Go/"}],"tags":[{"name":"Go语言","slug":"Go语言","permalink":"http://yoursite.com/tags/Go语言/"}]},{"title":"kernel学习","slug":"kernel学习","date":"2018-12-12T12:19:14.000Z","updated":"2020-03-27T02:50:32.975Z","comments":true,"path":"2018/12/12/kernel学习/","link":"","permalink":"http://yoursite.com/2018/12/12/kernel学习/","excerpt":"","text":"简介git仓库 github仓库 文档 wikis 编译通过git获取源代码 查看当前系统的内核配置文件 1/boot/config-$(uname -r) 名称 解释 defconfig 默认配置 allnoconfig 尽可能多的选项都关闭 allyesconfig 尽可能多的选项都开启 allmodconfig 尽可能多的选项作为模块启动 12$make ARCH=arm64 defconfig$make -j8 编译出错 1234kernel/built-in.o：在函数‘update_wall_time’中：(.text+0x293ee)：对‘____ilog2_NaN’未定义的引用Makefile:949: recipe for target 'vmlinux' failedmake: *** [vmlinux] Error 1 处理方法: 补丁包处理 构建虚拟内存盘(initrd)busybox官网 目录部署前期准备汇编整理1$gcc –S –o main.s main.c -m32 最简易根文件系统镜像github find . | cpio -o -Hnewc |gzip -9 &gt; ../rootfs.img 内核运行使用gdb调试 1234$gdb -q$&gt; file linux_*/vmlinux$&gt; target remote:1234$&gt; break start_kernel 相关资料linux-insides 中文翻译","categories":[],"tags":[{"name":"linux","slug":"linux","permalink":"http://yoursite.com/tags/linux/"}]},{"title":"linux上安装gcc","slug":"linux上安装gcc","date":"2018-12-01T10:05:27.000Z","updated":"2020-03-27T02:50:32.975Z","comments":true,"path":"2018/12/01/linux上安装gcc/","link":"","permalink":"http://yoursite.com/2018/12/01/linux上安装gcc/","excerpt":"","text":"linux上 安装gcc简介官网部署环境win10微软商店中的ubuntu18.04 gcc的历史版本 版本 简介 GCC 5.5 GCC 6.4 GCC 6.5 GCC 7.2 GCC 7.3 GCC 8.1 GCC 8.2 GCC 9.0 编译安装GCC 7.3下载1$wget ftp://ftp.gwdg.de/pub/misc/gcc/releases/gcc-7.3.0/gcc-7.3.0.tar.xz 解压12$xz -d gcc-7.3.0.tar.xz$tar -xvf gcc-7.3.0.tar 下载,配置,安装需要的依赖库 123456$./contrib/download_prerequisites$mkdir gcc-build-7.3.0 // 建立编译输出目录$../configure --enable-checking=release --enable-languages=c,c++ --disable-multilib$make$卸载 旧版本gcc和g++$sudo make install *.cpp-&gt;exe 汇编片段通用寄存器:AX、BX、CX、DXAX:累加寄存器，BX:基地址寄存器，CX:计数寄存器，DX:数据寄存器 变址寄存器:SI、DI 堆叠、基底暂存器:SP、BPSP:堆叠指标暂存器，BP:基底指标暂存器 E前缀表示32位系统 esp: 寄存器存放当前线程的栈顶指针 ebp:寄存器存放当前线程的栈底指针 eip:下一个CPU指令的存放位置 ebx: $?的返回 mov寄存器赋值 b,w,l,q代表8位,16位,32位,64位 push入栈指令 push %eax subl $4,%esp movl %eax ,(%esp) pop出栈指令 popl %eax movl (%esp), %eax addl $4,%esp leave相当于mov+pop callcall 0x12345 push %eip* movl 0x12345,%eip* retpopl %eip* enterpushl %ebp movl %esp,%ebp leavemovl %ebp,%esp popl %ebp objdump二进制文件分析查看当前系统是大端模式或小端模式1$objdump -i 反汇编123$objdump -S main# 或$objdump -d main 显示符号表入口1$objdump -t main readelf elf文件格式分析1$readelf -S a.out 0x0000 5555 5555 4610","categories":[],"tags":[{"name":"linux","slug":"linux","permalink":"http://yoursite.com/tags/linux/"}]},{"title":"C++系列_友元","slug":"C-系列-友元","date":"2018-11-30T22:25:37.000Z","updated":"2020-03-27T02:50:32.975Z","comments":true,"path":"2018/11/30/C-系列-友元/","link":"","permalink":"http://yoursite.com/2018/11/30/C-系列-友元/","excerpt":"","text":"C++系列_友元简介友元声明是在类的结构中.确保函数或者其他类有访问声明有元类中的私有和保护类的 语法friend function-deciaration friend function-definition friend elaborated-class-specifier friend simple-type-specifier friend typename-specifier 描述1.指定一个或几个函数作为类的友元12345678910class Y &#123; int data; friend std::ostream&amp; operator&lt;&lt;(std::ostream&amp; out, const Y&amp; o); friend char* X::foo(int); friend X::X(char), X::~X();&#125;;std::ostream&amp; operator&lt;&lt;(std::ostream&amp; out, const Y&amp; y)&#123; return out &lt;&lt; y.data;&#125; 2.(在非本地类定义)定义一个非成员函数,同时也让它成为这个类的友元.像这样的非成员函数也是inline方式. 12345678910class X &#123; int a; friend void friend_set(X&amp; p, int i) &#123; p.a = i; &#125;public: void member_set(int i) &#123; a = i; &#125;&#125;;","categories":[{"name":"CPlusPlus","slug":"CPlusPlus","permalink":"http://yoursite.com/categories/CPlusPlus/"}],"tags":[{"name":"c++","slug":"c","permalink":"http://yoursite.com/tags/c/"}]},{"title":"类之间的关系","slug":"类之间的关系","date":"2018-11-25T21:44:55.000Z","updated":"2020-03-27T02:50:32.979Z","comments":true,"path":"2018/11/25/类之间的关系/","link":"","permalink":"http://yoursite.com/2018/11/25/类之间的关系/","excerpt":"","text":"类之间的关系关系描述继承泛化: 继承非抽象类 实现: 继承抽象类 聚合: 组合: 关联: 依赖:","categories":[{"name":"CPlusPlus","slug":"CPlusPlus","permalink":"http://yoursite.com/categories/CPlusPlus/"}],"tags":[{"name":"c++","slug":"c","permalink":"http://yoursite.com/tags/c/"}]},{"title":"typora+pandoc使用","slug":"typora-pandoc使用","date":"2018-11-22T23:18:26.000Z","updated":"2020-03-27T02:50:32.975Z","comments":true,"path":"2018/11/22/typora-pandoc使用/","link":"","permalink":"http://yoursite.com/2018/11/22/typora-pandoc使用/","excerpt":"","text":"","categories":[],"tags":[]},{"title":"VSCode更新记录","slug":"VSCode更新记录","date":"2018-11-19T21:33:40.000Z","updated":"2020-03-27T02:50:32.975Z","comments":true,"path":"2018/11/19/VSCode更新记录/","link":"","permalink":"http://yoursite.com/2018/11/19/VSCode更新记录/","excerpt":"","text":"VSCodeVSCode使用cmd中文乱码暂时解决的办法: chcp 65001 通过配置解决 打开“文件”–“首选项”–“用户设置”，然后在setting.json中设置： terminal.integrated.shellArgs.windows 12345&#123; \"editor.fontSize\": 18, \"terminal.integrated.shellArgs.windows\": [\"/K chcp 65001 &gt;nul\"], \"terminal.integrated.fontFamily\": \"Lucida Console\",&#125; VSCode更新日志10月版本1.29.1 关键的亮点:1.多行搜索2.IntelliSense中的文件图标3.可折叠堆栈框架4.改进已加载脚本视图5.更新了扩展示例6.CI配方扩展7.预览列出所有扩展","categories":[{"name":"软件使用","slug":"软件使用","permalink":"http://yoursite.com/categories/软件使用/"}],"tags":[{"name":"工具","slug":"工具","permalink":"http://yoursite.com/tags/工具/"}]},{"title":"RabitMQ使用","slug":"RabitMQ使用","date":"2018-11-18T20:16:45.000Z","updated":"2020-03-27T02:50:32.975Z","comments":true,"path":"2018/11/18/RabitMQ使用/","link":"","permalink":"http://yoursite.com/2018/11/18/RabitMQ使用/","excerpt":"","text":"RabbitMQ链接官网 ubuntu上安装RabbitMQ 将RabbitMQ signing key添加到apt-key中 12$apt-key adv --keyserver \"hkps.pool.sks-keyservers.net\" --recv-keys \"0x6B73A36E6026DFCA\"$wget -O - \"https://github.com/rabbitmq/signing-keys/releases/download/2.0/rabbitmq-release-signing-key.asc\" | sudo apt-key add - 添加到sources.list.d中 1$echo \"deb https://dl.bintray.com/rabbitmq/debian bionic main\" | sudo tee /etc/apt/sources.list.d/bintray.rabbitmq.list 插件rabbitmq-management该插件提供基于HTTP的API,用于管理和监控RabbitMQ的节点和集群,以及基于浏览器的UI和命令行工具rabbitmqadmin.它定期收集和汇总有关系统许多方面的数据.这些指标在UI和监控系统中向所有操作员公开,用于长期存储,警报,可视化和图表分析. 入门该插件已经包含在RabbitMQ的发行版本中. 1$rabbitmq-plugins enable rabbitmq_management 配置RabbitMQ带有默认的内置配置.在一些环境下已经完全够用.在一些部署调整的环境下,还有一种代理和插件配置的方法. 用户管理创建用户1$rabbitmqctl add_user root 123789 设置权限1$rabbitmqctl set_user_tags root administrator 查看用户列表1$rabbitmqctl list_users 删除用户1$rabbitmqctl delete_user root 修改用户密码1$rabbitmqctl change_password admin 123789hgh 为用户赋权1234$rabbitmqctl list_user_permissions root$rabbitmqctl list_permissions -p vhost1$rabbitmqctl clear_permissions -p vhost1 root$rabbtimqctl set_permissions -p vhost1 root '.*' '.*' '.*' 编程语言支持C/C++RabbitMQ C clientSimpleAmqpClientamqpcppAMPQ-CPP","categories":[{"name":"开源代码","slug":"开源代码","permalink":"http://yoursite.com/categories/开源代码/"}],"tags":[{"name":"软件","slug":"软件","permalink":"http://yoursite.com/tags/软件/"}]},{"title":"前端基础常识","slug":"前端基础常识","date":"2018-11-17T11:57:30.000Z","updated":"2020-03-27T02:50:32.979Z","comments":true,"path":"2018/11/17/前端基础常识/","link":"","permalink":"http://yoursite.com/2018/11/17/前端基础常识/","excerpt":"","text":"前端常识 前端引擎view - 视图引擎分为ejs|hbs|hjs|jade|pug|twig|vash css - 样式表引擎分为less|stylus|compass|sass node模块chalk - 颜色模块ora - 编译过程显示rimraf - 删除目录 html标签nav 导航链接标签console的使用","categories":[{"name":"前端","slug":"前端","permalink":"http://yoursite.com/categories/前端/"}],"tags":[{"name":"node","slug":"node","permalink":"http://yoursite.com/tags/node/"}]},{"title":"CMD命令","slug":"CMD命令","date":"2018-11-17T11:36:19.000Z","updated":"2020-03-27T02:50:32.975Z","comments":true,"path":"2018/11/17/CMD命令/","link":"","permalink":"http://yoursite.com/2018/11/17/CMD命令/","excerpt":"","text":"CMD 链接命令整理 命令 说明 使用 md 创建文件夹 ‘&gt; md test_dir’ rmdir 删除文件夹下所有 ‘&gt; rmdir /s/q test_dir’ echo=&gt; 创建文件 ‘&gt; echo=&gt;test.txt’","categories":[{"name":"Windows","slug":"Windows","permalink":"http://yoursite.com/categories/Windows/"}],"tags":[{"name":"软件","slug":"软件","permalink":"http://yoursite.com/tags/软件/"}]},{"title":"Javascript整理","slug":"Javascript整理","date":"2018-11-15T23:40:38.000Z","updated":"2020-03-27T02:50:32.975Z","comments":true,"path":"2018/11/15/Javascript整理/","link":"","permalink":"http://yoursite.com/2018/11/15/Javascript整理/","excerpt":"","text":"Javascript链接阮哥的ES6入门","categories":[{"name":"操作系统","slug":"操作系统","permalink":"http://yoursite.com/categories/操作系统/"}],"tags":[{"name":"理论","slug":"理论","permalink":"http://yoursite.com/tags/理论/"}]},{"title":"BootStrap教程","slug":"BootStrap教程","date":"2018-11-11T09:47:55.000Z","updated":"2020-03-27T02:50:32.975Z","comments":true,"path":"2018/11/11/BootStrap教程/","link":"","permalink":"http://yoursite.com/2018/11/11/BootStrap教程/","excerpt":"","text":"[TOC] Bootstrap的CSS网格系统官方文档描述:Bootstrap包含一个响应式的,移动设备优先的,不固定的网格系统,可以随着设备或视口大小的增加而适当地扩展到12列.它包含了用于生成更多语义布局的功能强大的混合类. 排版标题内联子标题 &lt;h1&gt;标题&lt;small&gt;子标题&lt;/small&gt;&lt;/h1&gt; Bootstrap布局组件Bootstrap插件Bootstrap其他","categories":[{"name":"前端","slug":"前端","permalink":"http://yoursite.com/categories/前端/"}],"tags":[{"name":"软件","slug":"软件","permalink":"http://yoursite.com/tags/软件/"}]},{"title":"Onvif_PullPoint报警","slug":"Onvif_PullPoint报警","date":"2018-11-11T09:47:55.000Z","updated":"2020-03-27T02:50:32.975Z","comments":true,"path":"2018/11/11/Onvif_PullPoint报警/","link":"","permalink":"http://yoursite.com/2018/11/11/Onvif_PullPoint报警/","excerpt":"","text":"[TOC] Onvif的报警结构整理1.PullPoint方式1.1 创建PullPointSubscription{ char *to; char *from; char *token; time_t termTime; int bDestroy; int bFirst; } 1.2 PullMessage查找，{检查销毁条件}，超时时间获取报警, 销毁报警 1.3 销毁bDestroy = 1 2.Subscript方式2.1 创建{ char *to; char *from; char *token; time_t termTime; int bDestroy; int bFirst; } 2.2 有报警，向订阅地址发送消息2.3 销毁3.测试步骤(时间同步问题)3.1 UTC时间同步情况下3.2 UTC时间不同步情况下","categories":[{"name":"开源代码","slug":"开源代码","permalink":"http://yoursite.com/categories/开源代码/"}],"tags":[{"name":"软件","slug":"软件","permalink":"http://yoursite.com/tags/软件/"}]},{"title":"Sphinx","slug":"Sphinx","date":"2018-11-11T09:47:55.000Z","updated":"2020-03-27T02:50:32.975Z","comments":true,"path":"2018/11/11/Sphinx/","link":"","permalink":"http://yoursite.com/2018/11/11/Sphinx/","excerpt":"","text":"Sphinx链接官网 历史安装12$apt-get install python3-sphinx$pip install -U sphinx 案例分析实例","categories":[{"name":"软件使用","slug":"软件使用","permalink":"http://yoursite.com/categories/软件使用/"}],"tags":[{"name":"工具","slug":"工具","permalink":"http://yoursite.com/tags/工具/"}]},{"title":"VS2015的使用技巧","slug":"VS2015的使用技巧","date":"2018-11-11T09:47:55.000Z","updated":"2020-03-27T02:50:32.975Z","comments":true,"path":"2018/11/11/VS2015的使用技巧/","link":"","permalink":"http://yoursite.com/2018/11/11/VS2015的使用技巧/","excerpt":"","text":"[TOC] 链接使用技巧查看接口被引用的地方shift+F12","categories":[{"name":"软件使用","slug":"软件使用","permalink":"http://yoursite.com/categories/软件使用/"}],"tags":[{"name":"软件","slug":"软件","permalink":"http://yoursite.com/tags/软件/"}]},{"title":"VScode使用之C-C-调试","slug":"VScode使用之C-C-调试","date":"2018-11-11T09:47:55.000Z","updated":"2020-03-27T02:50:32.975Z","comments":true,"path":"2018/11/11/VScode使用之C-C-调试/","link":"","permalink":"http://yoursite.com/2018/11/11/VScode使用之C-C-调试/","excerpt":"","text":"安装流程安装cpptools插件ctrl + e打开快速命令行1ext install cpptools","categories":[{"name":"软件使用","slug":"软件使用","permalink":"http://yoursite.com/categories/软件使用/"}],"tags":[{"name":"软件","slug":"软件","permalink":"http://yoursite.com/tags/软件/"}]},{"title":"doxygen的Linux安装","slug":"doxygen的Linux安装","date":"2018-11-11T09:47:55.000Z","updated":"2020-03-27T02:50:32.975Z","comments":true,"path":"2018/11/11/doxygen的Linux安装/","link":"","permalink":"http://yoursite.com/2018/11/11/doxygen的Linux安装/","excerpt":"","text":"[TOC] Doxygen安装1.GNU工具安装 a.flex sudo apt-get install flex b.bison sudo apt-get install bison c.libiconv wget https://ftp.gnu.org/pub/gnu/libiconv/libiconv-1.15.tar.gz d.GNU make 4.1 e.strip ok f.cmake版本要为2.8.12之后 sudo apt-get install cmake 2.先进工具a.Qt Software&apos;s GUI toolkit b.latex sudo apt-get install texlive c.Graph visualization toolkit d.pdflatex","categories":[{"name":"开源代码","slug":"开源代码","permalink":"http://yoursite.com/categories/开源代码/"}],"tags":[{"name":"软件","slug":"软件","permalink":"http://yoursite.com/tags/软件/"}]},{"title":"gSoap源码分析_Alist表","slug":"gSoap源码分析_Alist表","date":"2018-11-11T09:47:55.000Z","updated":"2020-03-27T02:50:32.975Z","comments":true,"path":"2018/11/11/gSoap源码分析_Alist表/","link":"","permalink":"http://yoursite.com/2018/11/11/gSoap源码分析_Alist表/","excerpt":"","text":"[TOC] gSoap源码中Alist的使用123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110typedef void* ALIST_T#define SOAP_MAXALLOCSIZE (0) // 无限制#define SOAP_CANARY (0xC0DE)void *soap_malloc(ALIST_T *list, size_t n);void *soap_calloc(ALIST_T *list, size_t n);char *soap_strdup(ALIST_T *list, const char *s);void soap_echo_alist(ALIST_T *list);void soap_dealloc(ALIST_T *list, void *p);源码void* soap_malloc(ALIST_T *list, size_t n)&#123; char *p; if (SOAP_MAXALLOCSIZE &gt; 0 &amp;&amp; n &gt; SOAP_MAXALLOCSIZE) return NULL; if (n + sizeof(short) &lt; n) return NULL; n += sizeof(short); if (n + ((-(long)n) &amp; (sizeof(void*)-1)) + sizeof(void*) + sizeof(size_t) &lt; n) return NULL; n += (-(long)n) &amp; (sizeof(void*)-1); /* align at 4-, 8- or 16-byte boundary by rounding up */ p = (char*)SOAP_MALLOC(n + sizeof(void*) + sizeof(size_t)); if (!p) &#123; return NULL; &#125; /* set a canary word to detect memory overruns and data corruption */ *(unsigned short*)(p + n - sizeof(unsigned short)) = (unsigned short)SOAP_CANARY; /* keep chain of alloced cells for destruction */ *(void**)(p + n) = *list; *(size_t*)(p + n + sizeof(void*)) = n; *list = p + n; PRINT_Y(\"[%d]List:%x\", n, *list); return p;&#125;void* soap_calloc(ALIST_T *list, size_t n)&#123; char *p; p = soap_malloc(list, n); if (p) &#123; memset(p, 0, n); &#125; return p; &#125;char *soap_strdup(ALIST_T *list, const char *s)&#123; char *t = NULL; if (s) &#123; size_t n = strlen(s) + 1; if (n &gt; 0) &#123; t = (char*)soap_malloc(list, n); if (t) &#123; memcpy((void*)t, (const void*)s, n); t[n - 1] = '\\0'; &#125; &#125; &#125; return t;&#125;void soap_dealloc(ALIST_T *list, void *p)&#123; if (p) &#123; char **q; for (q = (char **)(void *)list; *q; q = *(char***)q) &#123; if (*(unsigned short*)(char*)(*q - sizeof(unsigned short)) != (unsigned short)SOAP_CANARY) &#123; return; &#125; if (p == (void*)(*q - *(size_t*)(*q + sizeof(void*)))) &#123; *q = **(char***)q; SOAP_FREE(p); return; &#125; &#125; &#125; else &#123; char *q; while (*list) &#123; q = (char*)*list; if (*(unsigned short*)(char*)(q - sizeof(unsigned short)) != (unsigned short)SOAP_CANARY) &#123; return; &#125; *list = *(void**)q; q -= *(size_t*)(q + sizeof(void*)); SOAP_FREE(p); &#125; &#125; return;&#125; 特点1.代码结构简洁2.可以对多指针的结构体进行统一分配和释放","categories":[{"name":"开源代码","slug":"开源代码","permalink":"http://yoursite.com/categories/开源代码/"}],"tags":[{"name":"软件","slug":"软件","permalink":"http://yoursite.com/tags/软件/"}]},{"title":"linux上samba服务安装","slug":"linux上samba服务安装","date":"2018-11-11T09:47:55.000Z","updated":"2020-03-27T02:50:32.975Z","comments":true,"path":"2018/11/11/linux上samba服务安装/","link":"","permalink":"http://yoursite.com/2018/11/11/linux上samba服务安装/","excerpt":"","text":"[TOC] samba安装apt-get install samba samba配置修改(/etc/samba/)[linux]path=/home/linuxvalid users=linuxpublic=yeswritable=yes 重启samba服务service smbd restart 创建samba用户smbpasswd -a root","categories":[{"name":"操作系统","slug":"操作系统","permalink":"http://yoursite.com/categories/操作系统/"}],"tags":[{"name":"软件","slug":"软件","permalink":"http://yoursite.com/tags/软件/"}]},{"title":"蓝牙","slug":"蓝牙","date":"2018-11-11T09:08:59.000Z","updated":"2020-03-27T02:50:32.979Z","comments":true,"path":"2018/11/11/蓝牙/","link":"","permalink":"http://yoursite.com/2018/11/11/蓝牙/","excerpt":"","text":"Bluetooth链接官网Zephyr 历史原理案例分析实践BlueZ v5.49","categories":[],"tags":[{"name":"bluetooth","slug":"bluetooth","permalink":"http://yoursite.com/tags/bluetooth/"}]},{"title":"CMake的使用","slug":"CMake的使用","date":"2018-11-08T23:53:32.000Z","updated":"2020-03-27T02:50:32.975Z","comments":true,"path":"2018/11/08/CMake的使用/","link":"","permalink":"http://yoursite.com/2018/11/08/CMake的使用/","excerpt":"","text":"CMake链接官网 CMake入门实践实践选项 使用基础的开始设置12cmake_minimum_required(VERSION 2.6)project(cplusplus_common) 设置编译器和编译参数12345678set(CXX_FLAGS-g-Wall-rdynamic)set(CMAKE_CXX_COMPILER \"g++\")# 显示编译过程参数set(CMAKE_VERBOSE_MAKEFILE OFF) 动态库编译add_library(hgh_base SHARED ${base_SRCS})target_link_libraries(hgh_base pthread rt) 静态库编译add_library(hgh_base ${base_SRCS})target_link_libraries(hgh_base pthread rt) 动态库和静态库同时编译set_target_properties(hgh_base_static PROPERTIES OUTPUT_NAME “hgh_base”) 可执行编译1add_executable(test SRC_LIST) 指定可执行程序的输出目录1set(EXECUTABLE_OUTPUT_PATH $&#123;PROJECT_BINARY_DIR&#125;/bin) 扩展使用build.sh脚本独立编译环境12345678910111213141516#!/bin/shset -xSOURCE_DIR=`pwd`BUILD_DIR=$&#123;BUILD_DIR:-../build&#125;BUILD_TYPE=$&#123;BUILD_TYPE:-debug&#125;INSTALL_DIR=$&#123;INSTALL_DIR:-../$&#123;BUILD_TYPE&#125;-install&#125;mkdir -p $BUILD_DIR/$BUILD_TYPE \\ &amp;&amp; cd $BUILD_DIR/$BUILD_TYPE \\ &amp;&amp; cmake \\ -DCMAKE_BUILD_TYPE=$BUILD_TYPE \\ -DCMAKE_INSTALL_PREFIX=$INSTALL_DIR \\ $SOURCE_DIR \\ &amp;&amp; make $*","categories":[{"name":"软件使用","slug":"软件使用","permalink":"http://yoursite.com/categories/软件使用/"}],"tags":[{"name":"项目管理","slug":"项目管理","permalink":"http://yoursite.com/tags/项目管理/"}]},{"title":"valgrind使用","slug":"valgrind使用","date":"2018-11-05T00:23:43.000Z","updated":"2020-03-27T02:50:32.975Z","comments":true,"path":"2018/11/05/valgrind使用/","link":"","permalink":"http://yoursite.com/2018/11/05/valgrind使用/","excerpt":"","text":"Valgrind链接下载地址使用","categories":[{"name":"调试","slug":"调试","permalink":"http://yoursite.com/categories/调试/"}],"tags":[{"name":"软件","slug":"软件","permalink":"http://yoursite.com/tags/软件/"}]},{"title":"svn使用","slug":"svn使用","date":"2018-11-04T22:43:51.000Z","updated":"2020-03-27T02:50:32.975Z","comments":true,"path":"2018/11/04/svn使用/","link":"","permalink":"http://yoursite.com/2018/11/04/svn使用/","excerpt":"","text":"SVN链接SVN官网ubuntu下svn的搭建google的svn服务器SVN命令设置过滤文件 SVN服务器搭建","categories":[{"name":"版本管理","slug":"版本管理","permalink":"http://yoursite.com/categories/版本管理/"}],"tags":[{"name":"工具","slug":"工具","permalink":"http://yoursite.com/tags/工具/"}]},{"title":"boost版本","slug":"boost版本","date":"2018-11-04T08:08:30.000Z","updated":"2020-03-27T02:50:32.975Z","comments":true,"path":"2018/11/04/boost版本/","link":"","permalink":"http://yoursite.com/2018/11/04/boost版本/","excerpt":"","text":"Boost链接API指针容器: boost::ptr_vector ptr_containerlinux下nanosleep() &amp; sleep()的区别 指针容器boost c++库中提供了指针容器专门来管理动态分配的对象.","categories":[],"tags":[{"name":"linux","slug":"linux","permalink":"http://yoursite.com/tags/linux/"}]},{"title":"muduo的使用入门","slug":"muduo的使用入门","date":"2018-11-03T21:54:05.000Z","updated":"2020-03-27T02:50:32.975Z","comments":true,"path":"2018/11/03/muduo的使用入门/","link":"","permalink":"http://yoursite.com/2018/11/03/muduo的使用入门/","excerpt":"","text":"muduomuduo简介依赖boost开源库. muduo的使用muduo_base的使用异步打印-Asynclogging","categories":[{"name":"CPlusPlus","slug":"CPlusPlus","permalink":"http://yoursite.com/categories/CPlusPlus/"}],"tags":[{"name":"c++","slug":"c","permalink":"http://yoursite.com/tags/c/"}]},{"title":"Linux下cmake的使用","slug":"Linux下cmake的使用","date":"2018-11-02T23:44:23.000Z","updated":"2020-03-27T02:50:32.975Z","comments":true,"path":"2018/11/02/Linux下cmake的使用/","link":"","permalink":"http://yoursite.com/2018/11/02/Linux下cmake的使用/","excerpt":"","text":"Cmake相关链接linux下cmake的使用","categories":[{"name":"Linux","slug":"Linux","permalink":"http://yoursite.com/categories/Linux/"}],"tags":[{"name":"软件","slug":"软件","permalink":"http://yoursite.com/tags/软件/"}]},{"title":"Linux手册","slug":"Linux手册","date":"2018-11-02T23:11:33.000Z","updated":"2020-03-27T02:50:32.975Z","comments":true,"path":"2018/11/02/Linux手册/","link":"","permalink":"http://yoursite.com/2018/11/02/Linux手册/","excerpt":"","text":"Linux手册常用链接Linux手册文档 应用查看linux中程序依赖的库使用ldd命令查看运行所依赖的库ldd + 程序 netstatxz和tar压缩压缩xz格式比7z还要小 修改Mac地址临时sudo ifconfig eth0 downsudo ifconfig eth0 hw ehter 地址sudo ifconfig eth0 up永久将命令加入 /etc/init.d/rc.local文件中","categories":[],"tags":[{"name":"linux","slug":"linux","permalink":"http://yoursite.com/tags/linux/"}]},{"title":"脚本使用","slug":"脚本使用","date":"2018-11-02T23:05:18.000Z","updated":"2020-03-27T02:50:32.979Z","comments":true,"path":"2018/11/02/脚本使用/","link":"","permalink":"http://yoursite.com/2018/11/02/脚本使用/","excerpt":"","text":"google的编程风格google的shell风格 1234#!/bin/sh# 如果调用失败就退出,set +e相反set -e 常用命令使用常用匹配符 匹配符 作用 . 匹配除换行之外的任意字符 \\w 匹配字母,数字或下划线 \\s 匹配任意的空白 \\d 匹配数字 \\D 匹配非数字字符 \\b 匹配单词的开始或结束 ^ 匹配字符串开始 &amp; 匹配字符串结束 命令使用grep 选项 作用 -i 忽略大小写 cut 选项 作用 指定单位 -b以字节为单位,-c以字符为单位,-f以字段为单位 N-,-M,N-M 取值范围 -d 指定定界符 xargs命令行参数转换 选项 作用 -d 指定分割符 -n [Num] 指定一行的字段数 wc 选项 作用 -l 统计行数 -w 统计单词数 -c 统计字符数 #,##,#,##,% ,%% 的含义及用法作用可以在${}分别替换得到不同的值,很有意思的一个地方,#在$的左边,%在$的右边 12345678910111213141516171819202122file=/dir1/dir2/dir3/myfile.txt# 删掉第一个/及其左边的字符串$&#123;file#*/&#125;# 删掉最后一个/及其左边的字符串$&#123;file##*/&#125;# 删掉第一个.及其左边的字符串$&#123;file#*.&#125;# 删掉最后一个.及其左边的字符串$&#123;file##*.&#125;# 删掉最后一个/及其右边的字符串$&#123;file%/*&#125;# 删除第一个/及其右边的字符串,‘.’类似$&#123;file%%/*&#125;# 提取最左边的5个字节$&#123;file:0:5&#125;# 提取第5个字节的连续5个字节$&#123;file:5:5&#125;# 对变量的值做替换,替换第一个$&#123;file/dir/path&#125;# 对变量的值做替换,替换所有$&#123;file//dir/path&#125; windows的bat脚本使用setlocal和endlocal的作用让中间程序对于系统变量的改变只在程序内起作用 pushd和popd的作用pushd保存当前目录供popd使用,然后改到指定目录 %~dp0%含义当前批处理文件所在的路径 :: 注释for命令1for /f \"tokens=2,3,4 delims=/ \" %%a in ('date /t') do @echo %%c-%%a-%%b findstr在文件中查找字符串findstr使用","categories":[{"name":"Linux","slug":"Linux","permalink":"http://yoursite.com/categories/Linux/"}],"tags":[{"name":"c++","slug":"c","permalink":"http://yoursite.com/tags/c/"}]},{"title":"acl模块之singleton","slug":"acl模块之singleton","date":"2018-10-15T22:40:50.000Z","updated":"2020-03-27T02:50:32.975Z","comments":true,"path":"2018/10/15/acl模块之singleton/","link":"","permalink":"http://yoursite.com/2018/10/15/acl模块之singleton/","excerpt":"","text":"acl模块之singleton##","categories":[{"name":"CPlusPlus","slug":"CPlusPlus","permalink":"http://yoursite.com/categories/CPlusPlus/"}],"tags":[{"name":"c++","slug":"c","permalink":"http://yoursite.com/tags/c/"}]},{"title":"使用acl实现websocket","slug":"使用acl实现websocket","date":"2018-10-15T22:25:08.000Z","updated":"2020-03-27T02:50:32.975Z","comments":true,"path":"2018/10/15/使用acl实现websocket/","link":"","permalink":"http://yoursite.com/2018/10/15/使用acl实现websocket/","excerpt":"","text":"使用acl实现websocket的结构分析相关模块分析 acl::singleton2的使用 master结构","categories":[],"tags":[{"name":"c++","slug":"c","permalink":"http://yoursite.com/tags/c/"}]},{"title":"redis安装和使用","slug":"redis安装和使用","date":"2018-10-15T21:38:44.000Z","updated":"2020-03-27T02:50:32.975Z","comments":true,"path":"2018/10/15/redis安装和使用/","link":"","permalink":"http://yoursite.com/2018/10/15/redis安装和使用/","excerpt":"","text":"安装官网v5.0 redis结构 名称 描述 redis-server redis-cli redis-benchmark redis-check-aof redis-check-rdb redis页面redis页面 redis-desktop-manager工具下载下载地址 redis.conf配置让其他设备能访问到方法1.将bind 127.0.0.1注释掉2.将protected-mode设为no navicat破解navicat破解","categories":[{"name":"开源代码","slug":"开源代码","permalink":"http://yoursite.com/categories/开源代码/"}],"tags":[{"name":"软件","slug":"软件","permalink":"http://yoursite.com/tags/软件/"}]},{"title":"acl开源库的使用","slug":"acl开源库的使用","date":"2018-10-14T22:07:15.000Z","updated":"2020-03-27T02:50:32.975Z","comments":true,"path":"2018/10/14/acl开源库的使用/","link":"","permalink":"http://yoursite.com/2018/10/14/acl开源库的使用/","excerpt":"","text":"来历使用queue_file队列文件 属性:m_fp 文件流对象m_filePath 相对于根目录的全部路径m_home 根目录路径m_queueName 队列名称m_queueSub 队列下的子目录m_partName 队列文件名m_extName 扩展名m_locker 锁m_bLocked 锁否m_bLockerOpened 文件锁开否nwriten_ 写入文件尺寸 优缺点分析","categories":[{"name":"开源代码","slug":"开源代码","permalink":"http://yoursite.com/categories/开源代码/"}],"tags":[{"name":"c++","slug":"c","permalink":"http://yoursite.com/tags/c/"}]},{"title":"Flash开发入门","slug":"Flash开发入门","date":"2018-05-18T18:02:18.000Z","updated":"2020-03-27T02:50:32.975Z","comments":true,"path":"2018/05/18/Flash开发入门/","link":"","permalink":"http://yoursite.com/2018/05/18/Flash开发入门/","excerpt":"","text":"链接 资源汇总 将Flash嵌入到WPF程序中 Flash AS3.0 socket编程 AS3类库资源集合 环境搭建实现多实例 Echo &gt; .multi 多工程的使用命令编译“$(CompilerPath)\\bin\\compc.exe” -include-sources “$(ProjectDir)\\src” -output “$(OutputDir)\\$(OutputName)” 链接库-include-libraries LibA库 中ClaALibB库 中ClaB","categories":[{"name":"操作系统","slug":"操作系统","permalink":"http://yoursite.com/categories/操作系统/"}],"tags":[{"name":"软件","slug":"软件","permalink":"http://yoursite.com/tags/软件/"}]},{"title":"webpack打包后的调试技巧","slug":"webpack打包后的调试技巧","date":"2018-05-17T06:33:00.000Z","updated":"2020-03-27T02:50:32.975Z","comments":true,"path":"2018/05/17/webpack打包后的调试技巧/","link":"","permalink":"http://yoursite.com/2018/05/17/webpack打包后的调试技巧/","excerpt":"","text":"简介使用webpack后很多代码被打包在一起,不方便调试.webpack提供了source map来解决这个问题.本文就分析webpack使用source map来调试代码的流程. 配置 devtool source-map cheap-module-source-map eval-source-map cheap-module-eval-source-map从上到下打包速度越来越快,负面作用越来越多","categories":[{"name":"前端","slug":"前端","permalink":"http://yoursite.com/categories/前端/"}],"tags":[{"name":"工具","slug":"工具","permalink":"http://yoursite.com/tags/工具/"}]},{"title":"nginx","slug":"nginx","date":"2018-05-13T11:51:39.000Z","updated":"2020-03-27T02:50:32.975Z","comments":true,"path":"2018/05/13/nginx/","link":"","permalink":"http://yoursite.com/2018/05/13/nginx/","excerpt":"","text":"nginx环境搭建 依赖库123456// pcre$sudo apt-get install libpcre3 libpcre3-dev// zlib$sudo apt-get install zlib1g-dev// openssl$sudo apt-get install openssl openssl-dev","categories":[{"name":"开源代码","slug":"开源代码","permalink":"http://yoursite.com/categories/开源代码/"}],"tags":[{"name":"软件","slug":"软件","permalink":"http://yoursite.com/tags/软件/"}]},{"title":"ubuntu重装系统环境搭建","slug":"ubuntu重装系统环境搭建","date":"2018-05-13T08:46:47.000Z","updated":"2020-03-27T02:50:32.975Z","comments":true,"path":"2018/05/13/ubuntu重装系统环境搭建/","link":"","permalink":"http://yoursite.com/2018/05/13/ubuntu重装系统环境搭建/","excerpt":"","text":"重装Ubuntu后的环境搭建 必要的 samba服务12345678$sudo apt-get install samba// 修改配置文件[hgh]path=/home/hghvalid users=hghpublic=yeswritable=yes git1$sudo apt-get install git vim1$sudo apt-get install vim-gtk ssh1$sudo apt-get install openssh-server 可选的","categories":[{"name":"Linux","slug":"Linux","permalink":"http://yoursite.com/categories/Linux/"}],"tags":[{"name":"软件","slug":"软件","permalink":"http://yoursite.com/tags/软件/"}]},{"title":"WPF教程","slug":"WPF教程","date":"2018-04-28T23:38:02.000Z","updated":"2020-03-27T02:50:32.975Z","comments":true,"path":"2018/04/28/WPF教程/","link":"","permalink":"http://yoursite.com/2018/04/28/WPF教程/","excerpt":"","text":"简介WPF是微软推出的基于Windows的用户界面框架.属于.NET Framework3.0的一部分.它提供了统一的编程模型、语言和框架,分离了界面设计人员与开发人员的工作,提供了全新的多媒体交互用户的图形界面.为用户界面、2D/3D图形、文档和媒体提供了统一的描述和操作方法.基于DirectX 9/10技术.通过WinFX公开.它由显示引擎和托管代码框架组成. 界面设计Expression Studio中套装工具可视化的设计页面. 程序开发在XAML页面的基础上进行逻辑开发. 部分组成1.引擎统一了开发人员和设计人员体验文档、媒体和UI的方式,为基于浏览器的体验、基于窗体的应用程序、图形、视频、音频和文档提供了一个单一的运行时库.灵活利用高DPI监视器.检测到支持硬件加速的视频卡时,会自动利用硬件的加速功能. 2.框架为媒体、用户界面设计和文档提供的解决方案远远超过开发人员现在所拥有的.提供通用框架和自定义控件. 响应程度腾讯曾经发布过一款基于WPF的QQ概念版.但是由于WPF的对PC系统的依赖原因,所有腾讯放弃了这个项目. WPF起步涉及知识点: 使用XAML设计应用程序的用户界面(UI)的外观 编写代码以生成程序 添加控件并创建布局以构成应用程序UI UI上的数据和代码数据同步 WPF中界面布局界面框架链接中文翻译UWP概念WPF之家博客园WPF梦里花落知多少Expression studio4","categories":[{"name":"操作系统","slug":"操作系统","permalink":"http://yoursite.com/categories/操作系统/"}],"tags":[{"name":"软件","slug":"软件","permalink":"http://yoursite.com/tags/软件/"}]},{"title":"bootstrap4.0搭建","slug":"bootstrap4-0搭建","date":"2018-04-25T22:27:33.000Z","updated":"2020-03-27T02:50:32.975Z","comments":true,"path":"2018/04/25/bootstrap4-0搭建/","link":"","permalink":"http://yoursite.com/2018/04/25/bootstrap4-0搭建/","excerpt":"","text":"样板(BootCDN)1234567891011121314151617181920&lt;!doctype html&gt;&lt;html lang=\"en\"&gt; &lt;head&gt; &lt;!-- Required meta tags --&gt; &lt;meta charset=\"utf-8\"&gt; &lt;meta name=\"viewport\" content=\"width=device-width, initial-scale=1, shrink-to-fit=no\"&gt; &lt;!-- Bootstrap CSS --&gt; &lt;link rel=\"stylesheet\" href=\"https://cdn.bootcss.com/bootstrap/4.0.0/css/bootstrap.min.css\" integrity=\"sha384-Gn5384xqQ1aoWXA+058RXPxPg6fy4IWvTNh0E263XmFcJlSAwiGgFAW/dAiS6JXm\" crossorigin=\"anonymous\"&gt; &lt;/head&gt; &lt;body&gt; &lt;h1&gt;Hello, world!&lt;/h1&gt; &lt;!-- Optional JavaScript --&gt; &lt;!-- jQuery first, then Popper.js, then Bootstrap JS --&gt; &lt;script src=\"https://cdn.bootcss.com/jquery/3.2.1/jquery.slim.min.js\" integrity=\"sha384-KJ3o2DKtIkvYIK3UENzmM7KCkRr/rE9/Qpg6aAZGJwFDMVNA/GpGFF93hXpG5KkN\" crossorigin=\"anonymous\"&gt;&lt;/script&gt; &lt;script src=\"https://cdn.bootcss.com/popper.js/1.12.9/umd/popper.min.js\" integrity=\"sha384-ApNbgh9B+Y1QKtv3Rn7W3mgPxhU9K/ScQsAP7hUibX39j7fakFPskvXusvfa0b4Q\" crossorigin=\"anonymous\"&gt;&lt;/script&gt; &lt;script src=\"https://cdn.bootcss.com/bootstrap/4.0.0/js/bootstrap.min.js\" integrity=\"sha384-JZR6Spejh4U02d8jOt6vLEHfe/JQGiRRSQQxSfFWpi1MquVdAyjUar5+76PVCmYl\" crossorigin=\"anonymous\"&gt;&lt;/script&gt; &lt;/body&gt;&lt;/html&gt; 栅格系统多媒体对象组件单元相关链接中文网","categories":[{"name":"前端","slug":"前端","permalink":"http://yoursite.com/categories/前端/"}],"tags":[{"name":"软件","slug":"软件","permalink":"http://yoursite.com/tags/软件/"}]},{"title":"LNMP环境","slug":"LNMP环境","date":"2018-04-24T21:39:29.000Z","updated":"2020-03-27T02:50:32.975Z","comments":true,"path":"2018/04/24/LNMP环境/","link":"","permalink":"http://yoursite.com/2018/04/24/LNMP环境/","excerpt":"","text":"简介 LNMP(Linux Nginx Mysql PHP)12sudo apt-get updatesudo apt-get install nginx php5-fpm php5-cli php5-curl php5-gd php5-mcrypt php5-mysql php5-cgi mysql-server 树莓派中搭建的问题在安装php5-fpm出现无法定位到安装包的问题修改apt的镜像源 (浙江大学镜像源地址)deb http://mirrors.zju.edu.cn/raspbian/raspbian/ jessie main contrib non-free rpideb-src http://mirrors.zju.edu.cn/raspbian/raspbian/ jessie main contrib non-free rpi 关于下载mysql-server依赖项的问题解决使用清华的镜像deb http://mirrors.tuna.tsinghua.edu.cn/raspbian/raspbian/ stretch main contrib non-free Mysql 简介Mysql是一个关系型数据库,由瑞典MySQL AB公司开发,目前属于Oracle旗下公司.MySQL最流行的关系数据库管理系统. 安装123$sudo apt-get install mysql-server$sudo apt-get install mysql-client$sudo apt-get install libmysqlclient-dev PHP PHP5.6.36123456789101112131415$./configure --prefix=/usr/local/php-5.5.7 \\--with-config-file-path=/usr/local/php-5.5.7/etc --with-bz2 --with-curl \\--enable-ftp --enable-sockets --disable-ipv6 --with-gd \\--with-jpeg-dir=/usr/local --with-png-dir=/usr/local \\--with-freetype-dir=/usr/local --enable-gd-native-ttf \\--with-iconv-dir=/usr/local --enable-mbstring --enable-calendar \\--with-gettext --with-libxml-dir=/usr/local --with-zlib \\--with-pdo-mysql=mysqlnd --with-mysqli=mysqlnd --with-mysql=mysqlnd \\--enable-dom --enable-xml --enable-fpm --with-libdir=lib64 --enable-bcmath$apt-get install libxml2$apt-get install libxml2-dev$apt-get install libbz2-dev$apt-get install curl$apt-get install libcurl4-gnutls-dev 链接nginx+php5.0安装zabbix环境ubuntu源码安装php的常见错误解决办法","categories":[{"name":"操作系统","slug":"操作系统","permalink":"http://yoursite.com/categories/操作系统/"}],"tags":[{"name":"项目管理","slug":"项目管理","permalink":"http://yoursite.com/tags/项目管理/"}]},{"title":"PHP入门","slug":"PHP入门","date":"2018-04-24T18:13:06.000Z","updated":"2020-03-27T02:50:32.975Z","comments":true,"path":"2018/04/24/PHP入门/","link":"","permalink":"http://yoursite.com/2018/04/24/PHP入门/","excerpt":"","text":"PHP的简介PHP(Hypertext Preprocessor)中文译为超级文本预处理语言.PHP是一种HTML内嵌式的语言.语言风格类似与C语言. PHP独特的语法混合了C、Java、Perl以及PHP自创新的语法. 最初是由勒多夫在1995年开始开发的.现在PHP的标准由the PHP Group维护.","categories":[{"name":"前端","slug":"前端","permalink":"http://yoursite.com/categories/前端/"}],"tags":[{"name":"理论","slug":"理论","permalink":"http://yoursite.com/tags/理论/"}]},{"title":"MFC工程创建","slug":"MFC工程创建","date":"2018-04-20T20:47:33.000Z","updated":"2020-03-27T02:50:32.975Z","comments":true,"path":"2018/04/20/MFC工程创建/","link":"","permalink":"http://yoursite.com/2018/04/20/MFC工程创建/","excerpt":"","text":"SDK应用程序和MFC应用程序的对比SDK应用程序的运行流程WinMain =&gt; 初始化WNDCLASSEX =&gt; 调用RegisterClassEx函数注册窗口类 =&gt;调用ShowWindow和UpdateWindow函数显示并更新窗口 =&gt; 进入消息循环&lt;br&gt; Windows应用程序是消息驱动的系统或用户让应用程序进行某项操作或完成某个 任务时会发送消息，进入程序的消息队列，然后消息循环会将消息队列中的消息 取出，交予相应的窗口过程处理，此程序的窗口过程函数就是myWndProc函数， 窗口过程函数处理完消息就完成了某项操作或任务。 MFC应用程序MFC应用程序根据工程的名称定义了一个全局对象theApp: CMFCApplication1App theApp,调用CWinApp和CMFCApplication1App的构造函数后，进入WinMain函数() 文件 Accelerator 快捷键 相关链接WPF使用MFC基础创建VS2017+GITMFC系列编程","categories":[{"name":"Windows","slug":"Windows","permalink":"http://yoursite.com/categories/Windows/"}],"tags":[{"name":"软件","slug":"软件","permalink":"http://yoursite.com/tags/软件/"}]},{"title":"net-snmp安装","slug":"net-snmp安装","date":"2018-04-20T18:34:27.000Z","updated":"2020-03-27T02:50:32.975Z","comments":true,"path":"2018/04/20/net-snmp安装/","link":"","permalink":"http://yoursite.com/2018/04/20/net-snmp安装/","excerpt":"","text":"官网参考网站 安装依赖包libperl-dev1$apt-get install libperl-snmp","categories":[{"name":"开源代码","slug":"开源代码","permalink":"http://yoursite.com/categories/开源代码/"}],"tags":[{"name":"理论","slug":"理论","permalink":"http://yoursite.com/tags/理论/"}]},{"title":"zabbix的使用","slug":"zabbix的使用","date":"2018-04-20T06:20:49.000Z","updated":"2020-03-27T02:50:32.975Z","comments":true,"path":"2018/04/20/zabbix的使用/","link":"","permalink":"http://yoursite.com/2018/04/20/zabbix的使用/","excerpt":"","text":"官网文档中文社区 安装 分发包安装 源码编译 容器安装 虚拟应用 服务端安装部署安装1.Windows环境下载地址 配置修改conf/zabbix_agentd.win.conf配置文件 1234LogFile=c:\\zabbix_agentd.logServer=192.168.0.210Hostname=f523540ServerActive=192.168.0.210 安装agent 1zabbix_agentd.exe -c E:\\zabbix\\conf\\zabbix_agentd.win.conf -i 启动agent客户端 1zabbix_agentd.exe -c E:\\zabbix\\conf\\zabbix_agentd.win.conf -s 启动agnet客户端","categories":[{"name":"调试","slug":"调试","permalink":"http://yoursite.com/categories/调试/"}],"tags":[{"name":"项目管理","slug":"项目管理","permalink":"http://yoursite.com/tags/项目管理/"}]},{"title":"专有名词解析","slug":"专有名词解释","date":"2018-04-20T06:20:49.000Z","updated":"2020-03-27T02:50:32.975Z","comments":true,"path":"2018/04/20/专有名词解释/","link":"","permalink":"http://yoursite.com/2018/04/20/专有名词解释/","excerpt":"","text":"[TOC] 1.PCM脉冲编码调制(Pulse Code Modulation) 2.GPIO总线扩展线(General Purpose Input Output) 功能： 1.与硬件进行数据交互(如UART) 2.控制硬件工作(如LED,蜂鸣器) 3.读取硬件的工作状态(如中断信号) 3.SPI串行外设接口(Serial Peripheral Interface) 高速、全双工、同步的通信总线. 最少四根线, SDI(数据输入),SDO(数据输出),SCLK(时钟),CS(片选) 4.I2S集成电路内置音频总线(Inter-IC Audio) 用于音频设备通信. 5.BCM编码编码侧重CPU寄存器，根据BCM2835的GPIO寄存器编号 6.WPI编码编号侧重实现逻辑，把扩展GPIO端口从0开始编号","categories":[{"name":"操作系统","slug":"操作系统","permalink":"http://yoursite.com/categories/操作系统/"}],"tags":[{"name":"理论","slug":"理论","permalink":"http://yoursite.com/tags/理论/"}]},{"title":"SourceTree的使用","slug":"SourceTree的使用","date":"2018-04-20T05:40:27.000Z","updated":"2020-03-27T02:50:32.975Z","comments":true,"path":"2018/04/20/SourceTree的使用/","link":"","permalink":"http://yoursite.com/2018/04/20/SourceTree的使用/","excerpt":"","text":"博客推荐","categories":[{"name":"版本管理","slug":"版本管理","permalink":"http://yoursite.com/categories/版本管理/"}],"tags":[{"name":"工具","slug":"工具","permalink":"http://yoursite.com/tags/工具/"}]},{"title":"Java的入门使用","slug":"Java的入门使用","date":"2018-04-18T00:43:42.000Z","updated":"2020-03-27T02:50:32.975Z","comments":true,"path":"2018/04/18/Java的入门使用/","link":"","permalink":"http://yoursite.com/2018/04/18/Java的入门使用/","excerpt":"","text":"Java中的命令javac&emsp;将.java文件编译成.class文件. java&emsp;运行*.class文件 javap&emsp;帮助开发者了解java的编译机制 第一个工程Hello World!123456/*hello.java*/public class hello &#123; public static void main(String []args) &#123; System.out.println(\"Hello World\"); &#125;&#125; 12$javac -d . .\\hello.java$java hello","categories":[{"name":"Java","slug":"Java","permalink":"http://yoursite.com/categories/Java/"}],"tags":[{"name":"Java","slug":"Java","permalink":"http://yoursite.com/tags/Java/"}]},{"title":"Java环境搭建","slug":"Java环境搭建","date":"2018-04-18T00:07:35.000Z","updated":"2020-03-27T02:50:32.975Z","comments":true,"path":"2018/04/18/Java环境搭建/","link":"","permalink":"http://yoursite.com/2018/04/18/Java环境搭建/","excerpt":"JDK下载Java的JDK安装包 配置环境变量右键”计算机”–属性–高级系统设置-高级 JAVA_HOME value: java的安装目录\\jdk1.8.0_91 CLASSPATH value: %JAVA_HOME%\\lib\\dt.jar;%JAVA_HOME%\\lib\\tools.jar; Path vaule: %JAVA_HOME%\\bin;%JAVA_HOME%\\jre\\bin; 注意: Win10中由于系统的限制,Path中的路径只能用绝对路径.","text":"JDK下载Java的JDK安装包 配置环境变量右键”计算机”–属性–高级系统设置-高级 JAVA_HOME value: java的安装目录\\jdk1.8.0_91 CLASSPATH value: %JAVA_HOME%\\lib\\dt.jar;%JAVA_HOME%\\lib\\tools.jar; Path vaule: %JAVA_HOME%\\bin;%JAVA_HOME%\\jre\\bin; 注意: Win10中由于系统的限制,Path中的路径只能用绝对路径. 检测安装成功123java -versionjavajavac 安装eclipse下载 VSCode的Java环境搭建 Language Support for Java(TM) Java Extension Pack Java Test Runner","categories":[{"name":"Java","slug":"Java","permalink":"http://yoursite.com/categories/Java/"}],"tags":[{"name":"Java","slug":"Java","permalink":"http://yoursite.com/tags/Java/"}]},{"title":"XMind简介","slug":"XMind简介","date":"2018-04-16T21:55:45.000Z","updated":"2020-03-27T02:50:32.975Z","comments":true,"path":"2018/04/16/XMind简介/","link":"","permalink":"http://yoursite.com/2018/04/16/XMind简介/","excerpt":"简介&emsp;&emsp;XMind是一款思维导图软件.使用Java语言编写.使用的是Eclipse RCP软件架构.可扩展，稳定性和性能.扩展名为.xmind.","text":"简介&emsp;&emsp;XMind是一款思维导图软件.使用Java语言编写.使用的是Eclipse RCP软件架构.可扩展，稳定性和性能.扩展名为.xmind. 界面","categories":[{"name":"操作系统","slug":"操作系统","permalink":"http://yoursite.com/categories/操作系统/"}],"tags":[{"name":"项目管理","slug":"项目管理","permalink":"http://yoursite.com/tags/项目管理/"}]},{"title":"GIT的使用","slug":"GIT的使用","date":"2018-04-15T17:50:57.000Z","updated":"2020-03-27T02:50:32.975Z","comments":true,"path":"2018/04/15/GIT的使用/","link":"","permalink":"http://yoursite.com/2018/04/15/GIT的使用/","excerpt":"对Linux中GIT相关操作做个总结 创建仓库分为三种方式: 创建工程目录后$git init $git init 工程名称 $git clone [url]:例如:git clone git@github.com:huguanghui/linux.git Linux上本地搭建Git服务器: 12git daemon --reuseaddr --export-all --enable=receive-pack --verbose --base-path=/root/GIT_local &amp;ufw allow 9418 注意当git push出现reject报错时, 仓库目录下执行chmod -R 777 *","text":"对Linux中GIT相关操作做个总结 创建仓库分为三种方式: 创建工程目录后$git init $git init 工程名称 $git clone [url]:例如:git clone git@github.com:huguanghui/linux.git Linux上本地搭建Git服务器: 12git daemon --reuseaddr --export-all --enable=receive-pack --verbose --base-path=/root/GIT_local &amp;ufw allow 9418 注意当git push出现reject报错时, 仓库目录下执行chmod -R 777 * 配置 显示当前配置:$git config - -list 编辑Git配置文件:$git config -e [- -global] 设置提交代码时的用户信息: 12git config [- -global] user.name \"[name]\" git config [- -global] user.email \"[email address]\" Github的认证 $ssh-keygen -t rsa -C “522146829@qq.com“ ##默认路径为~/.ssh/id_rsa 将生成的~/.ssh/id_rsa.pub加入github的ssh列表中 测试 ssh git@github.com 文件相关操作 添加指定文件到暂存区 1git add [file] 添加指定目录到暂存区 1git add [dir] 添加当前目录的所有文件到暂存区 1git add * 删除工作区文件,并将删除放入暂存区 1git rm [file] [file] 停止追踪指定文件,但该文件保留在工作区 1git rm --cached [file] 改名文件,并将这个改名文件放入暂存区 1git mv [file-original] [file-renamed] 代码提交 提交暂存区到仓库 1git commit -m [message] 提交指定文件到仓库 1git commit [file] .. -m [message] 提交工作区自上次commit之后的变化直接到仓库 1git commit -a 提交时显示所有diff信息 1git commit -v 如果代码没有任何变化,则用来改写上一次commit的提交信息 1git commit --amend -m [message] 重做上一次commit,并包括指定文件的新变化 1git commit --amend 分支 列出所有本地分支 1git branch 列出所有远程分支 1git branch -r 列出所有本地分支和远程分支 1git branch -a 新建一个分支依然停留在当前分支 1git branch [new branch name] 新建分支切换分支 1git checkout -b [new branch name] 新建分支指向指定commit 1git branch [branch] [commit] 新建一个分支与指定远程连接建立追踪关系 1git branch --track [branch] [remote-branch] 切换到指定分区,并更新工作区 1git checkout [branch] 现有分支和远程分支建立追踪关系 1git branch --set-upstream [branch] [remote-branch] 合并指定分支到当前分支 1git merge [branch] 选择一个commit合并到当前分支 1git cherry-pick [commit] 删除分支 1git branch -d [branch] 删除远程分支 12git push origin --deletegit branch -dr 创建远程分支 1git push origin 本地分支名:远程分支名 查看分支的追踪关系 1git branch --v 标签 列出所有tag 1git tag 新建一个tag在当前commit中 1git tag [tag] 新建一个tag在指定commit中 1git tag [tag] [commit] 查看tag信息 1git show [tag] 提交指定tag 1git push [remote] [tag] 提交所有tag 1git push [remote] --tags 新建一个分支,指向某个tag 1git checkout -b [branch] [tag] 查看信息 显示有变更的文件 1git status 显示当前分支的历史版本 1git log 显示commit历史,以及每次commit发生变化的文件 1git log --stat 显示某个文件的版本历史,包括文件改名 12git log --follow [file]git whatchanged [file] 显示指定文件相关的每一次diff 1git log -p [file] 仓库拉取1git pull &lt;远程主机名&gt; &lt;远程分支名&gt;:&lt;本地分支名&gt; 仓库同步12git push -u &lt;远程主机名&gt; &lt;本地分支名&gt;:&lt;远程分支名&gt;git push origin 本地:master 远程同步 将本地仓库与远程仓库关联 12git remote add origin git@github.com:huguanghui/hexo_blog.gitgit push -u origin master 下载远程仓库的所有变动 1git fetch [remote] 显示所有远程仓库 1git remote -v 显示某个远程仓库的信息 1git remote show [remote] submodule使用查看子模块的状态1$git submodule 或 git submodule status 添加子模块1$git submodule add git@github.com:name/*.git subpath 删除子模块123// 1.删除.gitmodules中需要删除的模块// 2.删除目录$git rm --cached subpath 克隆带子模块的工程123456// 方法一$git clone git@github.com:name/*.git$git submodule init$git submodule update// 方法二$git clone --recurse-submodules git@github.com:name/*.git 更新子模块12345678// 1.更新所有子模块到最新版本$git submodule update --remote// 2.更新指定子模块到最新版本$git submodule update --remote &lt;submodule-name&gt;// 3.提交子模块的依赖$git add *$git commit -m \"refresh\"$git push 环境配置推荐子模块单独维护s 12345// .gitmodules[submodule \"abc\"] path = abc url = git@github.com:huguanghui/cplusplus.git ignore = dirty/untracked/all 撤销 恢复暂存区的指定文件到工作区 1git checkout [file] 恢复某个commit指定文件到工作区 1git checkout [commit] [file] 恢复上一次commit的文件到工作区 1git checkout . 重置暂存区的指定文件,与上一次的commit保持一致,工作区不变 1git reset [file] 重置暂存区和工作区和上一次commit保持一致 1git reset --hard 重置当前分支的指针为commit,同时重置暂存区,工作区不变 1git reset [commit] 重置所有 1git reset --hard [commit] 只重置Header,暂存区和工作区不变 1git reset --keep [commit] 过滤 .gitignore的使用 版本回退未使用git add12git checkout -- filepathname 放弃单个文件修改git checkout . 放弃所有文件修改 使用了git add12git reset HEAD filepathnamegit reset HEAD . 使用了git commit12git reset --hard HEAD^ 退回上一次Commit的状态git reset --hard commitid 退回对应id的的位置 账号和密码自动保存配置 在你的用户目录下新建一个文本文件.git-credentials.git-credentials在文件中输入以下内容：https:{username}:{password}@github.com git config –global credential.helper store 注意事项:&lt;源地址&gt;：&lt;目标地址&gt;","categories":[{"name":"版本管理","slug":"版本管理","permalink":"http://yoursite.com/categories/版本管理/"}],"tags":[{"name":"工具","slug":"工具","permalink":"http://yoursite.com/tags/工具/"}]},{"title":"Hexo中的常用命令","slug":"Hexo中的常用命令","date":"2018-04-15T16:48:33.000Z","updated":"2020-03-27T02:50:32.975Z","comments":true,"path":"2018/04/15/Hexo中的常用命令/","link":"","permalink":"http://yoursite.com/2018/04/15/Hexo中的常用命令/","excerpt":"","text":"Hexo常用命令1234567hexo new \"postName\" #新建文章hexo new page \"pageName\" #新建页面hexo generate #生成静态页面至public目录hexo server #开启预览访问端口（默认端口4000，'ctrl + c'关闭server）hexo deploy #将.deploy目录部署到GitHubhexo help # 查看帮助hexo version #查看Hexo的版本 本地图片插件使用主配置文件中将post_asset_folder:true npm install https://github.com/CodeFalling/hexo-asset-image –save 利用TravisCI实现文档提交的自动部署1234567891011121314151617181920212223242526272829303132333435# 指定语言为node_js, nodejs版本stablelanguage: node_jsnode_js: stable# 指定构建的分支branches: only: - code# 制定node_modules缓存cache: directories: - node_modules# 构建之前安装hexo-clibefore_install: - npm install -g hexo-cli# 安装依赖install: - npm install# 执行脚本script: - hexo clean - hexo generate# 上面的脚本执行成功之后执行deployafter_success: - git init - git config --global user.name \"huguanghui\" - git config --global user.email \"522146829@qq.com\" # 替换同目录下_config.yml文件中的GH_TOKEN字符串为travis后台配置的GH_TOKEN - sed -i \"s/GH_TOKEN/$&#123;GH_TOKEN&#125;/g\" ./_config.yml - hexo deploy hexo插件安装","categories":[{"name":"前端","slug":"前端","permalink":"http://yoursite.com/categories/前端/"}],"tags":[{"name":"项目管理","slug":"项目管理","permalink":"http://yoursite.com/tags/项目管理/"}]},{"title":"查看linux系统的性能","slug":"linux中性能查看","date":"2018-04-03T11:47:35.000Z","updated":"2020-03-27T02:50:32.975Z","comments":true,"path":"2018/04/03/linux中性能查看/","link":"","permalink":"http://yoursite.com/2018/04/03/linux中性能查看/","excerpt":"","text":"虚拟内存基础-&gt;测量内存的使用情况-&gt;检测内测分配简单工具: free和top复杂工具: mtrace和Valgrind 虚拟内存基础Linux是通过CPU的内存管理单元提供的虚拟地址空间来运行程序的.32位处理器的最高地址是0xffffffff, 该地址被划分为多个4KB大小的页面.Linux将这个虚拟地址空间划分为用户空间和内核空间.两者由一个内核配置参数page_offset区分开.在一个典型的32位嵌入式系统中,PAGE_OFFSet设为0xc0000000,将底部的3GB分配给用户空间,将顶部的1GB分配给内核空间.每个进程分配一个用户地址空间，使得每个进程运行在相对独立的空间.内核地址空间对所有进程是相同的,因为只有一个内核.虚拟地址空间的页面通过内存管理单元(MMU)映射到物理地址,它使用页表来实现映射. 内核空间内存布局:内核内存在以kmalloc或相似函数分配内存时,是直接分配真正的物理内存.内核内存是不会被丢弃或被换出的.","categories":[{"name":"Linux","slug":"Linux","permalink":"http://yoursite.com/categories/Linux/"}],"tags":[{"name":"linux","slug":"linux","permalink":"http://yoursite.com/tags/linux/"},{"name":"性能","slug":"性能","permalink":"http://yoursite.com/tags/性能/"}]}]}